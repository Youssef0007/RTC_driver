
RTC_Driver_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002720  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002720  00002794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021f0  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000103f  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000059e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000078e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000087cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000096d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009965  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a133  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:



void APP_RTC_Display_Time_and_Date(Date_And_Time * ptr);
int main(void)
{	//Date_And_Time Current_Date_And_Time={35,11,9,6,29,3,24};
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2b 97       	sbiw	r28, 0x0b	; 11
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	Date_And_Time Get_Date_Time;
	RTC_Init();
     b4a:	0e 94 c7 0b 	call	0x178e	; 0x178e <RTC_Init>
	H_Lcd_Void_LCDInit();
     b4e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <H_Lcd_Void_LCDInit>


	//APP_RTC_Display_Time_and_Date(&Get_Date_Time);

 while(1)
 {	 H_Lcd_Void_LCDClear();
     b52:	0e 94 55 12 	call	0x24aa	; 0x24aa <H_Lcd_Void_LCDClear>
 	 RTC_Get_Time(&Get_Date_Time);
     b56:	ce 01       	movw	r24, r28
     b58:	05 96       	adiw	r24, 0x05	; 5
     b5a:	0e 94 a5 0c 	call	0x194a	; 0x194a <RTC_Get_Time>
 	 RTC_Get_Date(&Get_Date_Time);
     b5e:	ce 01       	movw	r24, r28
     b60:	05 96       	adiw	r24, 0x05	; 5
     b62:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <RTC_Get_Date>
	 APP_RTC_Display_Time_and_Date(&Get_Date_Time);
     b66:	ce 01       	movw	r24, r28
     b68:	05 96       	adiw	r24, 0x05	; 5
     b6a:	0e 94 d4 05 	call	0xba8	; 0xba8 <APP_RTC_Display_Time_and_Date>
	 for(long i =0 ; i<300000;i++);
     b6e:	19 82       	std	Y+1, r1	; 0x01
     b70:	1a 82       	std	Y+2, r1	; 0x02
     b72:	1b 82       	std	Y+3, r1	; 0x03
     b74:	1c 82       	std	Y+4, r1	; 0x04
     b76:	0b c0       	rjmp	.+22     	; 0xb8e <main+0x58>
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	ab 81       	ldd	r26, Y+3	; 0x03
     b7e:	bc 81       	ldd	r27, Y+4	; 0x04
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	a1 1d       	adc	r26, r1
     b84:	b1 1d       	adc	r27, r1
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	9a 83       	std	Y+2, r25	; 0x02
     b8a:	ab 83       	std	Y+3, r26	; 0x03
     b8c:	bc 83       	std	Y+4, r27	; 0x04
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	ab 81       	ldd	r26, Y+3	; 0x03
     b94:	bc 81       	ldd	r27, Y+4	; 0x04
     b96:	80 3e       	cpi	r24, 0xE0	; 224
     b98:	23 e9       	ldi	r18, 0x93	; 147
     b9a:	92 07       	cpc	r25, r18
     b9c:	24 e0       	ldi	r18, 0x04	; 4
     b9e:	a2 07       	cpc	r26, r18
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	b2 07       	cpc	r27, r18
     ba4:	4c f3       	brlt	.-46     	; 0xb78 <main+0x42>
     ba6:	d5 cf       	rjmp	.-86     	; 0xb52 <main+0x1c>

00000ba8 <APP_RTC_Display_Time_and_Date>:
 }
 return 0;
}
void  APP_RTC_Display_Time_and_Date(Date_And_Time * ptr)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	00 d0       	rcall	.+0      	; 0xbae <APP_RTC_Display_Time_and_Date+0x6>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01

	H_Lcd_Void_LCDWriteNumber(ptr->hours);
     bb6:	e9 81       	ldd	r30, Y+1	; 0x01
     bb8:	fa 81       	ldd	r31, Y+2	; 0x02
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	bc 01       	movw	r22, r24
     bc6:	cd 01       	movw	r24, r26
     bc8:	0e 94 5f 12 	call	0x24be	; 0x24be <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteCharacter(':');
     bcc:	8a e3       	ldi	r24, 0x3A	; 58
     bce:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(ptr->min);
     bd2:	e9 81       	ldd	r30, Y+1	; 0x01
     bd4:	fa 81       	ldd	r31, Y+2	; 0x02
     bd6:	81 81       	ldd	r24, Z+1	; 0x01
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 5f 12 	call	0x24be	; 0x24be <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteCharacter(':');
     be8:	8a e3       	ldi	r24, 0x3A	; 58
     bea:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(ptr->sec);
     bee:	e9 81       	ldd	r30, Y+1	; 0x01
     bf0:	fa 81       	ldd	r31, Y+2	; 0x02
     bf2:	80 81       	ld	r24, Z
     bf4:	88 2f       	mov	r24, r24
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 5f 12 	call	0x24be	; 0x24be <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDGoTo(1,0);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	0e 94 e7 12 	call	0x25ce	; 0x25ce <H_Lcd_Void_LCDGoTo>
	//H_Lcd_Void_LCDWriteNumber(Get_Date_Time.date);
	H_Lcd_Void_LCDWriteString(RTC_Day_str_display[ptr->day]);
     c0c:	28 e6       	ldi	r18, 0x68	; 104
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	e9 81       	ldd	r30, Y+1	; 0x01
     c12:	fa 81       	ldd	r31, Y+2	; 0x02
     c14:	83 81       	ldd	r24, Z+3	; 0x03
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	82 0f       	add	r24, r18
     c24:	93 1f       	adc	r25, r19
     c26:	0e 94 2c 12 	call	0x2458	; 0x2458 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDWriteCharacter(' ');
     c2a:	80 e2       	ldi	r24, 0x20	; 32
     c2c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(ptr->date);
     c30:	e9 81       	ldd	r30, Y+1	; 0x01
     c32:	fa 81       	ldd	r31, Y+2	; 0x02
     c34:	84 81       	ldd	r24, Z+4	; 0x04
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	0e 94 5f 12 	call	0x24be	; 0x24be <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteCharacter('/');
     c46:	8f e2       	ldi	r24, 0x2F	; 47
     c48:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(ptr->month);
     c4c:	e9 81       	ldd	r30, Y+1	; 0x01
     c4e:	fa 81       	ldd	r31, Y+2	; 0x02
     c50:	85 81       	ldd	r24, Z+5	; 0x05
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	a0 e0       	ldi	r26, 0x00	; 0
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	bc 01       	movw	r22, r24
     c5c:	cd 01       	movw	r24, r26
     c5e:	0e 94 5f 12 	call	0x24be	; 0x24be <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteCharacter('/');
     c62:	8f e2       	ldi	r24, 0x2F	; 47
     c64:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteNumber(20);
     c68:	64 e1       	ldi	r22, 0x14	; 20
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 5f 12 	call	0x24be	; 0x24be <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDWriteNumber(ptr->year);
     c74:	e9 81       	ldd	r30, Y+1	; 0x01
     c76:	fa 81       	ldd	r31, Y+2	; 0x02
     c78:	86 81       	ldd	r24, Z+6	; 0x06
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e0       	ldi	r26, 0x00	; 0
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	bc 01       	movw	r22, r24
     c84:	cd 01       	movw	r24, r26
     c86:	0e 94 5f 12 	call	0x24be	; 0x24be <H_Lcd_Void_LCDWriteNumber>
}
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <M_Void_I2C_Init>:
#include "I2C_Interface.h" 
#define F_CPU 16000000UL 
#define SCL_CLK 200000 /*Select SCL_CLK in Hz*/
#define BITRATE(TWSR_REG)	((F_CPU/SCL_CLK)-16)/(2 * (1 << (TWSR_REG*2)))
/*************************		INITIATE I2C	******************/
void M_Void_I2C_Init (){
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
	#if TWPS == TWPS_Value1
		CLR_BIT(TWSR_REG,TWPS0);
     ca0:	a1 e2       	ldi	r26, 0x21	; 33
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e1 e2       	ldi	r30, 0x21	; 33
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8e 7f       	andi	r24, 0xFE	; 254
     cac:	8c 93       	st	X, r24
		CLR_BIT(TWSR_REG,TWPS1);
     cae:	a1 e2       	ldi	r26, 0x21	; 33
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e2       	ldi	r30, 0x21	; 33
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	8d 7f       	andi	r24, 0xFD	; 253
     cba:	8c 93       	st	X, r24
		SET_BIT(TWSR_REG,TWPS1);
	#elif TWPS == TWPS_Value64 
		SET_BIT(TWSR_REG,TWPS0);
		SET_BIT(TWSR_REG,TWPS1);
	#endif
	TWBR_REG = BITRATE(TWSR_REG);	 
     cbc:	00 e2       	ldi	r16, 0x20	; 32
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	e1 e2       	ldi	r30, 0x21	; 33
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	9c 01       	movw	r18, r24
     ccc:	22 0f       	add	r18, r18
     cce:	33 1f       	adc	r19, r19
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <M_Void_I2C_Init+0x46>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	2a 95       	dec	r18
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <M_Void_I2C_Init+0x42>
     cde:	9c 01       	movw	r18, r24
     ce0:	44 27       	eor	r20, r20
     ce2:	37 fd       	sbrc	r19, 7
     ce4:	40 95       	com	r20
     ce6:	54 2f       	mov	r21, r20
     ce8:	80 e4       	ldi	r24, 0x40	; 64
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	bc 01       	movw	r22, r24
     cf2:	cd 01       	movw	r24, r26
     cf4:	0e 94 1a 13 	call	0x2634	; 0x2634 <__udivmodsi4>
     cf8:	da 01       	movw	r26, r20
     cfa:	c9 01       	movw	r24, r18
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
} 
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	08 95       	ret

00000d0a <M_U8_I2C_Start>:
/*************************		SEND START		*******************/
u8 M_U8_I2C_Start(){
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
	u8 transmit_status;		
	TWCR_REG =(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /*Enable TWI, generate START*/
     d14:	e6 e5       	ldi	r30, 0x56	; 86
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	84 ea       	ldi	r24, 0xA4	; 164
     d1a:	80 83       	st	Z, r24
	while(!(TWCR_REG & (1<<TWINT)));	/* Wait until TWI finish its current job*/
     d1c:	e6 e5       	ldi	r30, 0x56	; 86
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	88 23       	and	r24, r24
     d24:	dc f7       	brge	.-10     	; 0xd1c <M_U8_I2C_Start+0x12>
	transmit_status = (TWSR_REG & 0xF8);		/* Read TWI status register */
     d26:	e1 e2       	ldi	r30, 0x21	; 33
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	88 7f       	andi	r24, 0xF8	; 248
     d2e:	89 83       	std	Y+1, r24	; 0x01
	if(transmit_status != TWI_START)		/* Check weather START transmitted or not? */
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	09 f0       	breq	.+2      	; 0xd38 <M_U8_I2C_Start+0x2e>
	transmit_status = START_FAILED;			/* Return 0 to indicate start condition fail*/ 
     d36:	19 82       	std	Y+1, r1	; 0x01
	return transmit_status;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
} 
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <M_U8_I2C_SendSlaveAddressWithWrite>:
/*After Start we will send slave address with write*/
u8 M_U8_I2C_SendSlaveAddressWithWrite (u8 write_address){
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <M_U8_I2C_SendSlaveAddressWithWrite+0x6>
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	8a 83       	std	Y+2, r24	; 0x02
	u8 transmit_status;
	/*SEND ADDRESS BYTE*/
	TWDR_REG = write_address;		    /* Write SLA+W in TWI data register */
     d4e:	e3 e2       	ldi	r30, 0x23	; 35
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	80 83       	st	Z, r24
	TWCR_REG = (1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
     d56:	e6 e5       	ldi	r30, 0x56	; 86
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	84 e8       	ldi	r24, 0x84	; 132
     d5c:	80 83       	st	Z, r24
	while(!(TWCR_REG&(1<<TWINT)));		/* Wait until TWI finish its current job */
     d5e:	e6 e5       	ldi	r30, 0x56	; 86
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	88 23       	and	r24, r24
     d66:	dc f7       	brge	.-10     	; 0xd5e <M_U8_I2C_SendSlaveAddressWithWrite+0x1c>
	
	/*CHECK TRANSMIT WITH ACK*/
	transmit_status= (TWSR_REG & 0xF8);		/* Read TWI status register */
     d68:	e1 e2       	ldi	r30, 0x21	; 33
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	88 7f       	andi	r24, 0xF8	; 248
     d70:	89 83       	std	Y+1, r24	; 0x01
	if(transmit_status == TWI_MT_SLA_W_ACK)	/* Check for SLA+W transmitted & ack received */
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	88 31       	cpi	r24, 0x18	; 24
     d76:	19 f4       	brne	.+6      	; 0xd7e <M_U8_I2C_SendSlaveAddressWithWrite+0x3c>
	transmit_status = TWI_MT_SLA_W_ACK;		/* ACK RECIEVED */
     d78:	88 e1       	ldi	r24, 0x18	; 24
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	05 c0       	rjmp	.+10     	; 0xd88 <M_U8_I2C_SendSlaveAddressWithWrite+0x46>
	
	/*TRANSMIT WITH NO ACK*/
	else if(transmit_status == TWI_MT_SLA_NACK)		/* Check for SLA+W transmitted*/
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	80 32       	cpi	r24, 0x20	; 32
     d82:	11 f4       	brne	.+4      	; 0xd88 <M_U8_I2C_SendSlaveAddressWithWrite+0x46>
	transmit_status = TWI_MT_SLA_NACK;				/* Nack received */  
     d84:	80 e2       	ldi	r24, 0x20	; 32
     d86:	89 83       	std	Y+1, r24	; 0x01
	
	return transmit_status;
     d88:	89 81       	ldd	r24, Y+1	; 0x01
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <M_U8_I2C_Repeated_Start>:
/**************************		REPEAT START FUNCTION		****************/
u8 M_U8_I2C_Repeated_Start(){
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	0f 92       	push	r0
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	u8 transmit_status;									
	TWCR_REG = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate start */
     d9e:	e6 e5       	ldi	r30, 0x56	; 86
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	84 ea       	ldi	r24, 0xA4	; 164
     da4:	80 83       	st	Z, r24
	while(!(TWCR_REG & (1<<TWINT)));			/* Wait until TWI finish its current job */
     da6:	e6 e5       	ldi	r30, 0x56	; 86
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	dc f7       	brge	.-10     	; 0xda6 <M_U8_I2C_Repeated_Start+0x12>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
     db0:	e1 e2       	ldi	r30, 0x21	; 33
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	88 7f       	andi	r24, 0xF8	; 248
     db8:	89 83       	std	Y+1, r24	; 0x01
	if(transmit_status!= TWI_REP_START)					/* Check for repeated start transmitted */
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	80 31       	cpi	r24, 0x10	; 16
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <M_U8_I2C_Repeated_Start+0x2e>
	transmit_status = REP_START_FAILED;					/* repeated start condition fail */
     dc0:	19 82       	std	Y+1, r1	; 0x01
	
	return transmit_status; 
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc4:	0f 90       	pop	r0
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <M_U8_I2C_SendSlaveAddressWithRead>:
/**************************		SEND SLAVE ADDRESS WITH WRITE	**************/
u8 M_U8_I2C_SendSlaveAddressWithRead(u8 read_address){
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <M_U8_I2C_SendSlaveAddressWithRead+0x6>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	8a 83       	std	Y+2, r24	; 0x02
	u8 transmit_status; 
	TWDR_REG = read_address;					/* Write SLA+R in TWI data register */
     dd8:	e3 e2       	ldi	r30, 0x23	; 35
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	80 83       	st	Z, r24
	TWCR_REG = (1<<TWEN)|(1<<TWINT);			/* Enable TWI and clear interrupt flag */
     de0:	e6 e5       	ldi	r30, 0x56	; 86
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	84 e8       	ldi	r24, 0x84	; 132
     de6:	80 83       	st	Z, r24
	while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
     de8:	e6 e5       	ldi	r30, 0x56	; 86
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	88 23       	and	r24, r24
     df0:	dc f7       	brge	.-10     	; 0xde8 <M_U8_I2C_SendSlaveAddressWithRead+0x1c>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
     df2:	e1 e2       	ldi	r30, 0x21	; 33
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	88 7f       	andi	r24, 0xF8	; 248
     dfa:	89 83       	std	Y+1, r24	; 0x01
	
	if(transmit_status == TWI_MT_SLA_R_ACK)				/* Check for SLA+R transmitted*/
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	80 34       	cpi	r24, 0x40	; 64
     e00:	19 f4       	brne	.+6      	; 0xe08 <M_U8_I2C_SendSlaveAddressWithRead+0x3c>
	transmit_status = TWI_MT_SLA_R_ACK;					/* Ack received */
     e02:	80 e4       	ldi	r24, 0x40	; 64
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	05 c0       	rjmp	.+10     	; 0xe12 <M_U8_I2C_SendSlaveAddressWithRead+0x46>
	else if(transmit_status == TWI_MR_SLA_R_NACK)				/* Check for SLA+R transmitted*/
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	88 34       	cpi	r24, 0x48	; 72
     e0c:	11 f4       	brne	.+4      	; 0xe12 <M_U8_I2C_SendSlaveAddressWithRead+0x46>
	transmit_status = TWI_MR_SLA_R_NACK;					/* Nack received */
     e0e:	88 e4       	ldi	r24, 0x48	; 72
     e10:	89 83       	std	Y+1, r24	; 0x01
	
	return transmit_status; 
     e12:	89 81       	ldd	r24, Y+1	; 0x01
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <M_U8_I2C_Write>:
/**************************		WRITE DATA	FUNCTION	***********************/
u8 M_U8_I2C_Write(u8 data){
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <M_U8_I2C_Write+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	8a 83       	std	Y+2, r24	; 0x02
	u8 transmit_status;						
	TWDR_REG = data;				/* Copy data in TWI data register */
     e2a:	e3 e2       	ldi	r30, 0x23	; 35
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	80 83       	st	Z, r24
	TWCR_REG = (1<<TWEN)|(1<<TWINT);/* Enable TWI and clear interrupt flag */
     e32:	e6 e5       	ldi	r30, 0x56	; 86
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	84 e8       	ldi	r24, 0x84	; 132
     e38:	80 83       	st	Z, r24
	while(!(TWCR_REG&(1<<TWINT)));	/* Wait until TWI finish its current job */
     e3a:	e6 e5       	ldi	r30, 0x56	; 86
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 23       	and	r24, r24
     e42:	dc f7       	brge	.-10     	; 0xe3a <M_U8_I2C_Write+0x1c>
	transmit_status = TWSR_REG & 0xF8;		/* Read TWI status register */
     e44:	e1 e2       	ldi	r30, 0x21	; 33
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 7f       	andi	r24, 0xF8	; 248
     e4c:	89 83       	std	Y+1, r24	; 0x01
	if(transmit_status==TWI_MT_DATA_ACK)		/* Check for data transmitted*/
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	88 32       	cpi	r24, 0x28	; 40
     e52:	19 f4       	brne	.+6      	; 0xe5a <M_U8_I2C_Write+0x3c>
	transmit_status = TWI_MT_DATA_ACK;			/* Ack received */
     e54:	88 e2       	ldi	r24, 0x28	; 40
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <M_U8_I2C_Write+0x46>
	else if(transmit_status==TWI_MT_DATA_NACK)	/* Check for data transmitted*/
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	80 33       	cpi	r24, 0x30	; 48
     e5e:	11 f4       	brne	.+4      	; 0xe64 <M_U8_I2C_Write+0x46>
	transmit_status = TWI_MT_DATA_NACK;		/* Nack received */ 
     e60:	80 e3       	ldi	r24, 0x30	; 48
     e62:	89 83       	std	Y+1, r24	; 0x01
	
	return transmit_status; 
     e64:	89 81       	ldd	r24, Y+1	; 0x01
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <M_U8_I2C_ReadWithAck>:
u8 M_U8_I2C_ReadWithAck(){
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);	/* Enable TWI, generation of Ack */
     e78:	e6 e5       	ldi	r30, 0x56	; 86
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	84 ec       	ldi	r24, 0xC4	; 196
     e7e:	80 83       	st	Z, r24
    while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
     e80:	e6 e5       	ldi	r30, 0x56	; 86
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	88 23       	and	r24, r24
     e88:	dc f7       	brge	.-10     	; 0xe80 <M_U8_I2C_ReadWithAck+0x10>
    return TWDR_REG;							/* Return received data */
     e8a:	e3 e2       	ldi	r30, 0x23	; 35
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <M_U8_I2C_ReadWithNack>:
u8 M_U8_I2C_ReadWithNack(){
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG =(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
     e9e:	e6 e5       	ldi	r30, 0x56	; 86
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	84 e8       	ldi	r24, 0x84	; 132
     ea4:	80 83       	st	Z, r24
    while(!(TWCR_REG&(1<<TWINT)));			/* Wait until TWI finish its current job */
     ea6:	e6 e5       	ldi	r30, 0x56	; 86
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	88 23       	and	r24, r24
     eae:	dc f7       	brge	.-10     	; 0xea6 <M_U8_I2C_ReadWithNack+0x10>
    return TWDR_REG;					/* Return received data */
     eb0:	e3 e2       	ldi	r30, 0x23	; 35
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
}
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <M_Void_I2C_STOP>:
void M_Void_I2C_STOP(){
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
    TWCR_REG=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
     ec4:	e6 e5       	ldi	r30, 0x56	; 86
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	84 e9       	ldi	r24, 0x94	; 148
     eca:	80 83       	st	Z, r24
    while(TWCR_REG&(1<<TWSTO));				 /* Wait until stop condition execution */
     ecc:	e6 e5       	ldi	r30, 0x56	; 86
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	80 71       	andi	r24, 0x10	; 16
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	b9 f7       	brne	.-18     	; 0xecc <M_Void_I2C_STOP+0x10>
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	2a 97       	sbiw	r28, 0x0a	; 10
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	8b 83       	std	Y+3, r24	; 0x03
     efa:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9a e0       	ldi	r25, 0x0A	; 10
     f00:	69 2f       	mov	r22, r25
     f02:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
     f06:	89 2f       	mov	r24, r25
     f08:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	9a e0       	ldi	r25, 0x0A	; 10
     f0e:	69 2f       	mov	r22, r25
     f10:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
     f14:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3a 87       	std	Y+10, r19	; 0x0a
     f1e:	29 87       	std	Y+9, r18	; 0x09
     f20:	89 85       	ldd	r24, Y+9	; 0x09
     f22:	9a 85       	ldd	r25, Y+10	; 0x0a
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	39 f0       	breq	.+14     	; 0xf36 <M_DIO_Void_SetPinDirection+0x52>
     f28:	29 85       	ldd	r18, Y+9	; 0x09
     f2a:	3a 85       	ldd	r19, Y+10	; 0x0a
     f2c:	21 30       	cpi	r18, 0x01	; 1
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <M_DIO_Void_SetPinDirection+0x50>
     f32:	76 c0       	rjmp	.+236    	; 0x1020 <M_DIO_Void_SetPinDirection+0x13c>
     f34:	e4 c0       	rjmp	.+456    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	38 87       	std	Y+8, r19	; 0x08
     f3e:	2f 83       	std	Y+7, r18	; 0x07
     f40:	8f 81       	ldd	r24, Y+7	; 0x07
     f42:	98 85       	ldd	r25, Y+8	; 0x08
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	91 05       	cpc	r25, r1
     f48:	61 f1       	breq	.+88     	; 0xfa2 <M_DIO_Void_SetPinDirection+0xbe>
     f4a:	2f 81       	ldd	r18, Y+7	; 0x07
     f4c:	38 85       	ldd	r19, Y+8	; 0x08
     f4e:	23 30       	cpi	r18, 0x03	; 3
     f50:	31 05       	cpc	r19, r1
     f52:	34 f4       	brge	.+12     	; 0xf60 <M_DIO_Void_SetPinDirection+0x7c>
     f54:	8f 81       	ldd	r24, Y+7	; 0x07
     f56:	98 85       	ldd	r25, Y+8	; 0x08
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	91 05       	cpc	r25, r1
     f5c:	69 f0       	breq	.+26     	; 0xf78 <M_DIO_Void_SetPinDirection+0x94>
     f5e:	cf c0       	rjmp	.+414    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
     f60:	2f 81       	ldd	r18, Y+7	; 0x07
     f62:	38 85       	ldd	r19, Y+8	; 0x08
     f64:	23 30       	cpi	r18, 0x03	; 3
     f66:	31 05       	cpc	r19, r1
     f68:	89 f1       	breq	.+98     	; 0xfcc <M_DIO_Void_SetPinDirection+0xe8>
     f6a:	8f 81       	ldd	r24, Y+7	; 0x07
     f6c:	98 85       	ldd	r25, Y+8	; 0x08
     f6e:	84 30       	cpi	r24, 0x04	; 4
     f70:	91 05       	cpc	r25, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <M_DIO_Void_SetPinDirection+0x92>
     f74:	40 c0       	rjmp	.+128    	; 0xff6 <M_DIO_Void_SetPinDirection+0x112>
     f76:	c3 c0       	rjmp	.+390    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
     f78:	aa e3       	ldi	r26, 0x3A	; 58
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	ea e3       	ldi	r30, 0x3A	; 58
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <M_DIO_Void_SetPinDirection+0xb2>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <M_DIO_Void_SetPinDirection+0xae>
     f9a:	80 95       	com	r24
     f9c:	84 23       	and	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	ae c0       	rjmp	.+348    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
     fa2:	a7 e3       	ldi	r26, 0x37	; 55
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e7 e3       	ldi	r30, 0x37	; 55
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <M_DIO_Void_SetPinDirection+0xdc>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <M_DIO_Void_SetPinDirection+0xd8>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	99 c0       	rjmp	.+306    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
     fcc:	a4 e3       	ldi	r26, 0x34	; 52
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e4 e3       	ldi	r30, 0x34	; 52
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <M_DIO_Void_SetPinDirection+0x106>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <M_DIO_Void_SetPinDirection+0x102>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	84 c0       	rjmp	.+264    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
     ff6:	a1 e3       	ldi	r26, 0x31	; 49
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <M_DIO_Void_SetPinDirection+0x130>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <M_DIO_Void_SetPinDirection+0x12c>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	6f c0       	rjmp	.+222    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3e 83       	std	Y+6, r19	; 0x06
    1028:	2d 83       	std	Y+5, r18	; 0x05
    102a:	8d 81       	ldd	r24, Y+5	; 0x05
    102c:	9e 81       	ldd	r25, Y+6	; 0x06
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	91 05       	cpc	r25, r1
    1032:	51 f1       	breq	.+84     	; 0x1088 <M_DIO_Void_SetPinDirection+0x1a4>
    1034:	2d 81       	ldd	r18, Y+5	; 0x05
    1036:	3e 81       	ldd	r19, Y+6	; 0x06
    1038:	23 30       	cpi	r18, 0x03	; 3
    103a:	31 05       	cpc	r19, r1
    103c:	34 f4       	brge	.+12     	; 0x104a <M_DIO_Void_SetPinDirection+0x166>
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	61 f0       	breq	.+24     	; 0x1060 <M_DIO_Void_SetPinDirection+0x17c>
    1048:	5a c0       	rjmp	.+180    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
    104a:	2d 81       	ldd	r18, Y+5	; 0x05
    104c:	3e 81       	ldd	r19, Y+6	; 0x06
    104e:	23 30       	cpi	r18, 0x03	; 3
    1050:	31 05       	cpc	r19, r1
    1052:	71 f1       	breq	.+92     	; 0x10b0 <M_DIO_Void_SetPinDirection+0x1cc>
    1054:	8d 81       	ldd	r24, Y+5	; 0x05
    1056:	9e 81       	ldd	r25, Y+6	; 0x06
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	91 05       	cpc	r25, r1
    105c:	e9 f1       	breq	.+122    	; 0x10d8 <M_DIO_Void_SetPinDirection+0x1f4>
    105e:	4f c0       	rjmp	.+158    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    1060:	aa e3       	ldi	r26, 0x3A	; 58
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	ea e3       	ldi	r30, 0x3A	; 58
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <M_DIO_Void_SetPinDirection+0x19a>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <M_DIO_Void_SetPinDirection+0x196>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	3b c0       	rjmp	.+118    	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    1088:	a7 e3       	ldi	r26, 0x37	; 55
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e7 e3       	ldi	r30, 0x37	; 55
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <M_DIO_Void_SetPinDirection+0x1c2>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <M_DIO_Void_SetPinDirection+0x1be>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	27 c0       	rjmp	.+78     	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    10b0:	a4 e3       	ldi	r26, 0x34	; 52
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e4 e3       	ldi	r30, 0x34	; 52
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <M_DIO_Void_SetPinDirection+0x1ea>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <M_DIO_Void_SetPinDirection+0x1e6>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	13 c0       	rjmp	.+38     	; 0x10fe <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    10d8:	a1 e3       	ldi	r26, 0x31	; 49
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e1 e3       	ldi	r30, 0x31	; 49
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <M_DIO_Void_SetPinDirection+0x212>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <M_DIO_Void_SetPinDirection+0x20e>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
			default:                                break;
			}
			break;
			default:    break;
	}
}
    10fe:	2a 96       	adiw	r28, 0x0a	; 10
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	2a 97       	sbiw	r28, 0x0a	; 10
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	8b 83       	std	Y+3, r24	; 0x03
    1126:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9a e0       	ldi	r25, 0x0A	; 10
    112c:	69 2f       	mov	r22, r25
    112e:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1132:	89 2f       	mov	r24, r25
    1134:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9a e0       	ldi	r25, 0x0A	; 10
    113a:	69 2f       	mov	r22, r25
    113c:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1140:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3a 87       	std	Y+10, r19	; 0x0a
    114a:	29 87       	std	Y+9, r18	; 0x09
    114c:	89 85       	ldd	r24, Y+9	; 0x09
    114e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	39 f0       	breq	.+14     	; 0x1162 <M_DIO_Void_SetPinValue+0x52>
    1154:	29 85       	ldd	r18, Y+9	; 0x09
    1156:	3a 85       	ldd	r19, Y+10	; 0x0a
    1158:	21 30       	cpi	r18, 0x01	; 1
    115a:	31 05       	cpc	r19, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <M_DIO_Void_SetPinValue+0x50>
    115e:	76 c0       	rjmp	.+236    	; 0x124c <M_DIO_Void_SetPinValue+0x13c>
    1160:	e4 c0       	rjmp	.+456    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	38 87       	std	Y+8, r19	; 0x08
    116a:	2f 83       	std	Y+7, r18	; 0x07
    116c:	8f 81       	ldd	r24, Y+7	; 0x07
    116e:	98 85       	ldd	r25, Y+8	; 0x08
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	91 05       	cpc	r25, r1
    1174:	61 f1       	breq	.+88     	; 0x11ce <M_DIO_Void_SetPinValue+0xbe>
    1176:	2f 81       	ldd	r18, Y+7	; 0x07
    1178:	38 85       	ldd	r19, Y+8	; 0x08
    117a:	23 30       	cpi	r18, 0x03	; 3
    117c:	31 05       	cpc	r19, r1
    117e:	34 f4       	brge	.+12     	; 0x118c <M_DIO_Void_SetPinValue+0x7c>
    1180:	8f 81       	ldd	r24, Y+7	; 0x07
    1182:	98 85       	ldd	r25, Y+8	; 0x08
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	69 f0       	breq	.+26     	; 0x11a4 <M_DIO_Void_SetPinValue+0x94>
    118a:	cf c0       	rjmp	.+414    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
    118c:	2f 81       	ldd	r18, Y+7	; 0x07
    118e:	38 85       	ldd	r19, Y+8	; 0x08
    1190:	23 30       	cpi	r18, 0x03	; 3
    1192:	31 05       	cpc	r19, r1
    1194:	89 f1       	breq	.+98     	; 0x11f8 <M_DIO_Void_SetPinValue+0xe8>
    1196:	8f 81       	ldd	r24, Y+7	; 0x07
    1198:	98 85       	ldd	r25, Y+8	; 0x08
    119a:	84 30       	cpi	r24, 0x04	; 4
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <M_DIO_Void_SetPinValue+0x92>
    11a0:	40 c0       	rjmp	.+128    	; 0x1222 <M_DIO_Void_SetPinValue+0x112>
    11a2:	c3 c0       	rjmp	.+390    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    11a4:	ab e3       	ldi	r26, 0x3B	; 59
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	eb e3       	ldi	r30, 0x3B	; 59
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <M_DIO_Void_SetPinValue+0xb2>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <M_DIO_Void_SetPinValue+0xae>
    11c6:	80 95       	com	r24
    11c8:	84 23       	and	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	ae c0       	rjmp	.+348    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    11ce:	a8 e3       	ldi	r26, 0x38	; 56
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e8 e3       	ldi	r30, 0x38	; 56
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <M_DIO_Void_SetPinValue+0xdc>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <M_DIO_Void_SetPinValue+0xd8>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	99 c0       	rjmp	.+306    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    11f8:	a5 e3       	ldi	r26, 0x35	; 53
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e5 e3       	ldi	r30, 0x35	; 53
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <M_DIO_Void_SetPinValue+0x106>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <M_DIO_Void_SetPinValue+0x102>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	84 c0       	rjmp	.+264    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1222:	a2 e3       	ldi	r26, 0x32	; 50
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e2 e3       	ldi	r30, 0x32	; 50
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <M_DIO_Void_SetPinValue+0x130>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <M_DIO_Void_SetPinValue+0x12c>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	6f c0       	rjmp	.+222    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3e 83       	std	Y+6, r19	; 0x06
    1254:	2d 83       	std	Y+5, r18	; 0x05
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	91 05       	cpc	r25, r1
    125e:	51 f1       	breq	.+84     	; 0x12b4 <M_DIO_Void_SetPinValue+0x1a4>
    1260:	2d 81       	ldd	r18, Y+5	; 0x05
    1262:	3e 81       	ldd	r19, Y+6	; 0x06
    1264:	23 30       	cpi	r18, 0x03	; 3
    1266:	31 05       	cpc	r19, r1
    1268:	34 f4       	brge	.+12     	; 0x1276 <M_DIO_Void_SetPinValue+0x166>
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	91 05       	cpc	r25, r1
    1272:	61 f0       	breq	.+24     	; 0x128c <M_DIO_Void_SetPinValue+0x17c>
    1274:	5a c0       	rjmp	.+180    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
    1276:	2d 81       	ldd	r18, Y+5	; 0x05
    1278:	3e 81       	ldd	r19, Y+6	; 0x06
    127a:	23 30       	cpi	r18, 0x03	; 3
    127c:	31 05       	cpc	r19, r1
    127e:	71 f1       	breq	.+92     	; 0x12dc <M_DIO_Void_SetPinValue+0x1cc>
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	84 30       	cpi	r24, 0x04	; 4
    1286:	91 05       	cpc	r25, r1
    1288:	e9 f1       	breq	.+122    	; 0x1304 <M_DIO_Void_SetPinValue+0x1f4>
    128a:	4f c0       	rjmp	.+158    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    128c:	ab e3       	ldi	r26, 0x3B	; 59
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	eb e3       	ldi	r30, 0x3B	; 59
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <M_DIO_Void_SetPinValue+0x19a>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <M_DIO_Void_SetPinValue+0x196>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	3b c0       	rjmp	.+118    	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    12b4:	a8 e3       	ldi	r26, 0x38	; 56
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e8 e3       	ldi	r30, 0x38	; 56
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <M_DIO_Void_SetPinValue+0x1c2>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <M_DIO_Void_SetPinValue+0x1be>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	27 c0       	rjmp	.+78     	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    12dc:	a5 e3       	ldi	r26, 0x35	; 53
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <M_DIO_Void_SetPinValue+0x1ea>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <M_DIO_Void_SetPinValue+0x1e6>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	13 c0       	rjmp	.+38     	; 0x132a <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1304:	a2 e3       	ldi	r26, 0x32	; 50
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e2 e3       	ldi	r30, 0x32	; 50
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <M_DIO_Void_SetPinValue+0x212>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <M_DIO_Void_SetPinValue+0x20e>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    132a:	2a 96       	adiw	r28, 0x0a	; 10
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <M_DIO_Void_GetPinValue+0x6>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <M_DIO_Void_GetPinValue+0x8>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <M_DIO_Void_GetPinValue+0xa>
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9a e0       	ldi	r25, 0x0A	; 10
    1350:	69 2f       	mov	r22, r25
    1352:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1356:	89 2f       	mov	r24, r25
    1358:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9a e0       	ldi	r25, 0x0A	; 10
    135e:	69 2f       	mov	r22, r25
    1360:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1364:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    1366:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	3e 83       	std	Y+6, r19	; 0x06
    1370:	2d 83       	std	Y+5, r18	; 0x05
    1372:	4d 81       	ldd	r20, Y+5	; 0x05
    1374:	5e 81       	ldd	r21, Y+6	; 0x06
    1376:	42 30       	cpi	r20, 0x02	; 2
    1378:	51 05       	cpc	r21, r1
    137a:	41 f1       	breq	.+80     	; 0x13cc <M_DIO_Void_GetPinValue+0x90>
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	34 f4       	brge	.+12     	; 0x1392 <M_DIO_Void_GetPinValue+0x56>
    1386:	2d 81       	ldd	r18, Y+5	; 0x05
    1388:	3e 81       	ldd	r19, Y+6	; 0x06
    138a:	21 30       	cpi	r18, 0x01	; 1
    138c:	31 05       	cpc	r19, r1
    138e:	61 f0       	breq	.+24     	; 0x13a8 <M_DIO_Void_GetPinValue+0x6c>
    1390:	52 c0       	rjmp	.+164    	; 0x1436 <M_DIO_Void_GetPinValue+0xfa>
    1392:	4d 81       	ldd	r20, Y+5	; 0x05
    1394:	5e 81       	ldd	r21, Y+6	; 0x06
    1396:	43 30       	cpi	r20, 0x03	; 3
    1398:	51 05       	cpc	r21, r1
    139a:	51 f1       	breq	.+84     	; 0x13f0 <M_DIO_Void_GetPinValue+0xb4>
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	84 30       	cpi	r24, 0x04	; 4
    13a2:	91 05       	cpc	r25, r1
    13a4:	b9 f1       	breq	.+110    	; 0x1414 <M_DIO_Void_GetPinValue+0xd8>
    13a6:	47 c0       	rjmp	.+142    	; 0x1436 <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    13a8:	e9 e3       	ldi	r30, 0x39	; 57
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <M_DIO_Void_GetPinValue+0x84>
    13bc:	55 95       	asr	r21
    13be:	47 95       	ror	r20
    13c0:	8a 95       	dec	r24
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <M_DIO_Void_GetPinValue+0x80>
    13c4:	ca 01       	movw	r24, r20
    13c6:	81 70       	andi	r24, 0x01	; 1
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	35 c0       	rjmp	.+106    	; 0x1436 <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    13cc:	e6 e3       	ldi	r30, 0x36	; 54
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <M_DIO_Void_GetPinValue+0xa8>
    13e0:	55 95       	asr	r21
    13e2:	47 95       	ror	r20
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <M_DIO_Void_GetPinValue+0xa4>
    13e8:	ca 01       	movw	r24, r20
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	23 c0       	rjmp	.+70     	; 0x1436 <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    13f0:	e3 e3       	ldi	r30, 0x33	; 51
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a9 01       	movw	r20, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <M_DIO_Void_GetPinValue+0xcc>
    1404:	55 95       	asr	r21
    1406:	47 95       	ror	r20
    1408:	8a 95       	dec	r24
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <M_DIO_Void_GetPinValue+0xc8>
    140c:	ca 01       	movw	r24, r20
    140e:	81 70       	andi	r24, 0x01	; 1
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	11 c0       	rjmp	.+34     	; 0x1436 <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1414:	e0 e3       	ldi	r30, 0x30	; 48
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <M_DIO_Void_GetPinValue+0xf0>
    1428:	55 95       	asr	r21
    142a:	47 95       	ror	r20
    142c:	8a 95       	dec	r24
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <M_DIO_Void_GetPinValue+0xec>
    1430:	ca 01       	movw	r24, r20
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1436:	89 81       	ldd	r24, Y+1	; 0x01
}
    1438:	26 96       	adiw	r28, 0x06	; 6
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <M_DIO_Void_TogPin+0x6>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <M_DIO_Void_TogPin+0x8>
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9a e0       	ldi	r25, 0x0A	; 10
    145e:	69 2f       	mov	r22, r25
    1460:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1464:	89 2f       	mov	r24, r25
    1466:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9a e0       	ldi	r25, 0x0A	; 10
    146c:	69 2f       	mov	r22, r25
    146e:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1472:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3d 83       	std	Y+5, r19	; 0x05
    147c:	2c 83       	std	Y+4, r18	; 0x04
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	91 05       	cpc	r25, r1
    1486:	51 f1       	breq	.+84     	; 0x14dc <M_DIO_Void_TogPin+0x92>
    1488:	2c 81       	ldd	r18, Y+4	; 0x04
    148a:	3d 81       	ldd	r19, Y+5	; 0x05
    148c:	23 30       	cpi	r18, 0x03	; 3
    148e:	31 05       	cpc	r19, r1
    1490:	34 f4       	brge	.+12     	; 0x149e <M_DIO_Void_TogPin+0x54>
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	91 05       	cpc	r25, r1
    149a:	61 f0       	breq	.+24     	; 0x14b4 <M_DIO_Void_TogPin+0x6a>
    149c:	5a c0       	rjmp	.+180    	; 0x1552 <M_DIO_Void_TogPin+0x108>
    149e:	2c 81       	ldd	r18, Y+4	; 0x04
    14a0:	3d 81       	ldd	r19, Y+5	; 0x05
    14a2:	23 30       	cpi	r18, 0x03	; 3
    14a4:	31 05       	cpc	r19, r1
    14a6:	71 f1       	breq	.+92     	; 0x1504 <M_DIO_Void_TogPin+0xba>
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	84 30       	cpi	r24, 0x04	; 4
    14ae:	91 05       	cpc	r25, r1
    14b0:	e9 f1       	breq	.+122    	; 0x152c <M_DIO_Void_TogPin+0xe2>
    14b2:	4f c0       	rjmp	.+158    	; 0x1552 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    14b4:	ab e3       	ldi	r26, 0x3B	; 59
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	eb e3       	ldi	r30, 0x3B	; 59
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	48 2f       	mov	r20, r24
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 2e       	mov	r0, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <M_DIO_Void_TogPin+0x88>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	0a 94       	dec	r0
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <M_DIO_Void_TogPin+0x84>
    14d6:	84 27       	eor	r24, r20
    14d8:	8c 93       	st	X, r24
    14da:	3b c0       	rjmp	.+118    	; 0x1552 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    14dc:	a8 e3       	ldi	r26, 0x38	; 56
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e8 e3       	ldi	r30, 0x38	; 56
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <M_DIO_Void_TogPin+0xb0>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <M_DIO_Void_TogPin+0xac>
    14fe:	84 27       	eor	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	27 c0       	rjmp	.+78     	; 0x1552 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1504:	a5 e3       	ldi	r26, 0x35	; 53
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e3       	ldi	r30, 0x35	; 53
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <M_DIO_Void_TogPin+0xd8>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <M_DIO_Void_TogPin+0xd4>
    1526:	84 27       	eor	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	13 c0       	rjmp	.+38     	; 0x1552 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    152c:	a2 e3       	ldi	r26, 0x32	; 50
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e2 e3       	ldi	r30, 0x32	; 50
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <M_DIO_Void_TogPin+0x100>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <M_DIO_Void_TogPin+0xfc>
    154e:	84 27       	eor	r24, r20
    1550:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	2a 97       	sbiw	r28, 0x0a	; 10
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	8b 83       	std	Y+3, r24	; 0x03
    1578:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9a e0       	ldi	r25, 0x0A	; 10
    157e:	69 2f       	mov	r22, r25
    1580:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1584:	89 2f       	mov	r24, r25
    1586:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9a e0       	ldi	r25, 0x0A	; 10
    158c:	69 2f       	mov	r22, r25
    158e:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1592:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3a 87       	std	Y+10, r19	; 0x0a
    159c:	29 87       	std	Y+9, r18	; 0x09
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	39 f0       	breq	.+14     	; 0x15b4 <M_DIO_Void_SetPinPullUpRes+0x52>
    15a6:	29 85       	ldd	r18, Y+9	; 0x09
    15a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    15aa:	21 30       	cpi	r18, 0x01	; 1
    15ac:	31 05       	cpc	r19, r1
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <M_DIO_Void_SetPinPullUpRes+0x50>
    15b0:	76 c0       	rjmp	.+236    	; 0x169e <M_DIO_Void_SetPinPullUpRes+0x13c>
    15b2:	e4 c0       	rjmp	.+456    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	38 87       	std	Y+8, r19	; 0x08
    15bc:	2f 83       	std	Y+7, r18	; 0x07
    15be:	8f 81       	ldd	r24, Y+7	; 0x07
    15c0:	98 85       	ldd	r25, Y+8	; 0x08
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	91 05       	cpc	r25, r1
    15c6:	61 f1       	breq	.+88     	; 0x1620 <M_DIO_Void_SetPinPullUpRes+0xbe>
    15c8:	2f 81       	ldd	r18, Y+7	; 0x07
    15ca:	38 85       	ldd	r19, Y+8	; 0x08
    15cc:	23 30       	cpi	r18, 0x03	; 3
    15ce:	31 05       	cpc	r19, r1
    15d0:	34 f4       	brge	.+12     	; 0x15de <M_DIO_Void_SetPinPullUpRes+0x7c>
    15d2:	8f 81       	ldd	r24, Y+7	; 0x07
    15d4:	98 85       	ldd	r25, Y+8	; 0x08
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	91 05       	cpc	r25, r1
    15da:	69 f0       	breq	.+26     	; 0x15f6 <M_DIO_Void_SetPinPullUpRes+0x94>
    15dc:	cf c0       	rjmp	.+414    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
    15de:	2f 81       	ldd	r18, Y+7	; 0x07
    15e0:	38 85       	ldd	r19, Y+8	; 0x08
    15e2:	23 30       	cpi	r18, 0x03	; 3
    15e4:	31 05       	cpc	r19, r1
    15e6:	89 f1       	breq	.+98     	; 0x164a <M_DIO_Void_SetPinPullUpRes+0xe8>
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	98 85       	ldd	r25, Y+8	; 0x08
    15ec:	84 30       	cpi	r24, 0x04	; 4
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <M_DIO_Void_SetPinPullUpRes+0x92>
    15f2:	40 c0       	rjmp	.+128    	; 0x1674 <M_DIO_Void_SetPinPullUpRes+0x112>
    15f4:	c3 c0       	rjmp	.+390    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    15f6:	ab e3       	ldi	r26, 0x3B	; 59
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	eb e3       	ldi	r30, 0x3B	; 59
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <M_DIO_Void_SetPinPullUpRes+0xae>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	ae c0       	rjmp	.+348    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1620:	a8 e3       	ldi	r26, 0x38	; 56
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e8 e3       	ldi	r30, 0x38	; 56
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <M_DIO_Void_SetPinPullUpRes+0xdc>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <M_DIO_Void_SetPinPullUpRes+0xd8>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	99 c0       	rjmp	.+306    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    164a:	a5 e3       	ldi	r26, 0x35	; 53
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e5 e3       	ldi	r30, 0x35	; 53
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <M_DIO_Void_SetPinPullUpRes+0x106>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <M_DIO_Void_SetPinPullUpRes+0x102>
    166c:	80 95       	com	r24
    166e:	84 23       	and	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	84 c0       	rjmp	.+264    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1674:	a2 e3       	ldi	r26, 0x32	; 50
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e2 e3       	ldi	r30, 0x32	; 50
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <M_DIO_Void_SetPinPullUpRes+0x130>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <M_DIO_Void_SetPinPullUpRes+0x12c>
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	6f c0       	rjmp	.+222    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3e 83       	std	Y+6, r19	; 0x06
    16a6:	2d 83       	std	Y+5, r18	; 0x05
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	91 05       	cpc	r25, r1
    16b0:	51 f1       	breq	.+84     	; 0x1706 <M_DIO_Void_SetPinPullUpRes+0x1a4>
    16b2:	2d 81       	ldd	r18, Y+5	; 0x05
    16b4:	3e 81       	ldd	r19, Y+6	; 0x06
    16b6:	23 30       	cpi	r18, 0x03	; 3
    16b8:	31 05       	cpc	r19, r1
    16ba:	34 f4       	brge	.+12     	; 0x16c8 <M_DIO_Void_SetPinPullUpRes+0x166>
    16bc:	8d 81       	ldd	r24, Y+5	; 0x05
    16be:	9e 81       	ldd	r25, Y+6	; 0x06
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	91 05       	cpc	r25, r1
    16c4:	61 f0       	breq	.+24     	; 0x16de <M_DIO_Void_SetPinPullUpRes+0x17c>
    16c6:	5a c0       	rjmp	.+180    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
    16c8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ca:	3e 81       	ldd	r19, Y+6	; 0x06
    16cc:	23 30       	cpi	r18, 0x03	; 3
    16ce:	31 05       	cpc	r19, r1
    16d0:	71 f1       	breq	.+92     	; 0x172e <M_DIO_Void_SetPinPullUpRes+0x1cc>
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	91 05       	cpc	r25, r1
    16da:	e9 f1       	breq	.+122    	; 0x1756 <M_DIO_Void_SetPinPullUpRes+0x1f4>
    16dc:	4f c0       	rjmp	.+158    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    16de:	ab e3       	ldi	r26, 0x3B	; 59
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	eb e3       	ldi	r30, 0x3B	; 59
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	48 2f       	mov	r20, r24
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 2e       	mov	r0, r18
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <M_DIO_Void_SetPinPullUpRes+0x19a>
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	0a 94       	dec	r0
    16fe:	e2 f7       	brpl	.-8      	; 0x16f8 <M_DIO_Void_SetPinPullUpRes+0x196>
    1700:	84 2b       	or	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	3b c0       	rjmp	.+118    	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1706:	a8 e3       	ldi	r26, 0x38	; 56
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e8 e3       	ldi	r30, 0x38	; 56
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <M_DIO_Void_SetPinPullUpRes+0x1be>
    1728:	84 2b       	or	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	27 c0       	rjmp	.+78     	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    172e:	a5 e3       	ldi	r26, 0x35	; 53
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e5 e3       	ldi	r30, 0x35	; 53
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <M_DIO_Void_SetPinPullUpRes+0x1ea>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <M_DIO_Void_SetPinPullUpRes+0x1e6>
    1750:	84 2b       	or	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	13 c0       	rjmp	.+38     	; 0x177c <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1756:	a2 e3       	ldi	r26, 0x32	; 50
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e2 e3       	ldi	r30, 0x32	; 50
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <M_DIO_Void_SetPinPullUpRes+0x212>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <M_DIO_Void_SetPinPullUpRes+0x20e>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    177c:	2a 96       	adiw	r28, 0x0a	; 10
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <RTC_Init>:
#include "RTC_Inter.h"

u8 RTC_Day_str_display[7][4]={"SAT","SUN","MON","TUE","WEN","THU","FRI"};

void RTC_Init()
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
	M_Void_I2C_Init();
    1796:	0e 94 4a 06 	call	0xc94	; 0xc94 <M_Void_I2C_Init>
}
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <RTC_Set_Time>:
void RTC_Set_Time(Date_And_Time *Config_Date)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <RTC_Set_Time+0x6>
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
	M_U8_I2C_Start();/*send the start bit*/
    17ae:	0e 94 85 06 	call	0xd0a	; 0xd0a <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
    17b2:	80 ed       	ldi	r24, 0xD0	; 208
    17b4:	0e 94 a1 06 	call	0xd42	; 0xd42 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x00 in RTC to write the seconds*/
	M_U8_I2C_Write(RTC_SECONDS_REG_ADDRESS);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>
	/*send the seconds and the CH bit is cleared*/
		/*send the units of seconds in the least 4 bits then the tens seconds in the higher 4 bits   */
	M_U8_I2C_Write((((Config_Date -> sec / 10) << 4)|((Config_Date -> sec) % 10)) & (~(1<<7)));
    17be:	e9 81       	ldd	r30, Y+1	; 0x01
    17c0:	fa 81       	ldd	r31, Y+2	; 0x02
    17c2:	80 81       	ld	r24, Z
    17c4:	9a e0       	ldi	r25, 0x0A	; 10
    17c6:	69 2f       	mov	r22, r25
    17c8:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	82 95       	swap	r24
    17d2:	92 95       	swap	r25
    17d4:	90 7f       	andi	r25, 0xF0	; 240
    17d6:	98 27       	eor	r25, r24
    17d8:	80 7f       	andi	r24, 0xF0	; 240
    17da:	98 27       	eor	r25, r24
    17dc:	28 2f       	mov	r18, r24
    17de:	e9 81       	ldd	r30, Y+1	; 0x01
    17e0:	fa 81       	ldd	r31, Y+2	; 0x02
    17e2:	80 81       	ld	r24, Z
    17e4:	9a e0       	ldi	r25, 0x0A	; 10
    17e6:	69 2f       	mov	r22, r25
    17e8:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    17ec:	89 2f       	mov	r24, r25
    17ee:	82 2b       	or	r24, r18
    17f0:	8f 77       	andi	r24, 0x7F	; 127
    17f2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>

	/*send the units of mins in the least 4 bits then the tens mins in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> min / 10) << 4)|((Config_Date -> min) % 10));
    17f6:	e9 81       	ldd	r30, Y+1	; 0x01
    17f8:	fa 81       	ldd	r31, Y+2	; 0x02
    17fa:	81 81       	ldd	r24, Z+1	; 0x01
    17fc:	9a e0       	ldi	r25, 0x0A	; 10
    17fe:	69 2f       	mov	r22, r25
    1800:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	82 95       	swap	r24
    180a:	92 95       	swap	r25
    180c:	90 7f       	andi	r25, 0xF0	; 240
    180e:	98 27       	eor	r25, r24
    1810:	80 7f       	andi	r24, 0xF0	; 240
    1812:	98 27       	eor	r25, r24
    1814:	28 2f       	mov	r18, r24
    1816:	e9 81       	ldd	r30, Y+1	; 0x01
    1818:	fa 81       	ldd	r31, Y+2	; 0x02
    181a:	81 81       	ldd	r24, Z+1	; 0x01
    181c:	9a e0       	ldi	r25, 0x0A	; 10
    181e:	69 2f       	mov	r22, r25
    1820:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1824:	89 2f       	mov	r24, r25
    1826:	82 2b       	or	r24, r18
    1828:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>
#elif (_12_or_24_MODE == _12_Mode && PM_OR_AM == PM)
		/*send the units of hours in the least 4 bits then the tens hours in the higher 4 bits  ++  set the 6th bit for the 12 hours mode and the 5th bit for PM */
		M_U8_I2C_Write((((Config_Date -> hours / 10) << 4)|((Config_Date -> hours) % 10) | (1<<6))| ((1<<5)));
#elif _12_or_24_MODE == _24_Mode
		/*send the units of hours in the least 4 bits then the tens hours in the higher 4 bits  ++  clear the 6th bit for the 24 hours mode*/
	    M_U8_I2C_Write((((Config_Date -> hours / 10) << 4)|((Config_Date -> hours) % 10)) &(~(1<<6)));
    182c:	e9 81       	ldd	r30, Y+1	; 0x01
    182e:	fa 81       	ldd	r31, Y+2	; 0x02
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	9a e0       	ldi	r25, 0x0A	; 10
    1834:	69 2f       	mov	r22, r25
    1836:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	82 95       	swap	r24
    1840:	92 95       	swap	r25
    1842:	90 7f       	andi	r25, 0xF0	; 240
    1844:	98 27       	eor	r25, r24
    1846:	80 7f       	andi	r24, 0xF0	; 240
    1848:	98 27       	eor	r25, r24
    184a:	28 2f       	mov	r18, r24
    184c:	e9 81       	ldd	r30, Y+1	; 0x01
    184e:	fa 81       	ldd	r31, Y+2	; 0x02
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	9a e0       	ldi	r25, 0x0A	; 10
    1854:	69 2f       	mov	r22, r25
    1856:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    185a:	89 2f       	mov	r24, r25
    185c:	82 2b       	or	r24, r18
    185e:	8f 7b       	andi	r24, 0xBF	; 191
    1860:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>
#endif

	    M_Void_I2C_STOP();
    1864:	0e 94 5e 07 	call	0xebc	; 0xebc <M_Void_I2C_STOP>
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <RTC_Set_Date>:


void RTC_Set_Date(Date_And_Time *Config_Date)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <RTC_Set_Date+0x6>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
	M_U8_I2C_Start();/*send the start bit*/
    1880:	0e 94 85 06 	call	0xd0a	; 0xd0a <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
    1884:	80 ed       	ldi	r24, 0xD0	; 208
    1886:	0e 94 a1 06 	call	0xd42	; 0xd42 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x03 in RTC to write the day*/
	M_U8_I2C_Write(RTC_DAYS_REG_ADDRESS);
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>
		/*send the units of seconds in the least 4 bits then the tens seconds in the higher 4 bits   */
	M_U8_I2C_Write(Config_Date -> day);
    1890:	e9 81       	ldd	r30, Y+1	; 0x01
    1892:	fa 81       	ldd	r31, Y+2	; 0x02
    1894:	83 81       	ldd	r24, Z+3	; 0x03
    1896:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>

	/*send the units of date in the least 4 bits then the tens date in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> date / 10) << 4)|((Config_Date -> date) % 10));
    189a:	e9 81       	ldd	r30, Y+1	; 0x01
    189c:	fa 81       	ldd	r31, Y+2	; 0x02
    189e:	84 81       	ldd	r24, Z+4	; 0x04
    18a0:	9a e0       	ldi	r25, 0x0A	; 10
    18a2:	69 2f       	mov	r22, r25
    18a4:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	82 95       	swap	r24
    18ae:	92 95       	swap	r25
    18b0:	90 7f       	andi	r25, 0xF0	; 240
    18b2:	98 27       	eor	r25, r24
    18b4:	80 7f       	andi	r24, 0xF0	; 240
    18b6:	98 27       	eor	r25, r24
    18b8:	28 2f       	mov	r18, r24
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	84 81       	ldd	r24, Z+4	; 0x04
    18c0:	9a e0       	ldi	r25, 0x0A	; 10
    18c2:	69 2f       	mov	r22, r25
    18c4:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    18c8:	89 2f       	mov	r24, r25
    18ca:	82 2b       	or	r24, r18
    18cc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>
	/*send the units of month in the least 4 bits then the tens month in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> month / 10) << 4)|((Config_Date -> month) % 10));
    18d0:	e9 81       	ldd	r30, Y+1	; 0x01
    18d2:	fa 81       	ldd	r31, Y+2	; 0x02
    18d4:	85 81       	ldd	r24, Z+5	; 0x05
    18d6:	9a e0       	ldi	r25, 0x0A	; 10
    18d8:	69 2f       	mov	r22, r25
    18da:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	82 95       	swap	r24
    18e4:	92 95       	swap	r25
    18e6:	90 7f       	andi	r25, 0xF0	; 240
    18e8:	98 27       	eor	r25, r24
    18ea:	80 7f       	andi	r24, 0xF0	; 240
    18ec:	98 27       	eor	r25, r24
    18ee:	28 2f       	mov	r18, r24
    18f0:	e9 81       	ldd	r30, Y+1	; 0x01
    18f2:	fa 81       	ldd	r31, Y+2	; 0x02
    18f4:	85 81       	ldd	r24, Z+5	; 0x05
    18f6:	9a e0       	ldi	r25, 0x0A	; 10
    18f8:	69 2f       	mov	r22, r25
    18fa:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    18fe:	89 2f       	mov	r24, r25
    1900:	82 2b       	or	r24, r18
    1902:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>
	/*send the units of year in the least 4 bits then the tens year in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> year / 10) << 4)|((Config_Date -> year) % 10));
    1906:	e9 81       	ldd	r30, Y+1	; 0x01
    1908:	fa 81       	ldd	r31, Y+2	; 0x02
    190a:	86 81       	ldd	r24, Z+6	; 0x06
    190c:	9a e0       	ldi	r25, 0x0A	; 10
    190e:	69 2f       	mov	r22, r25
    1910:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	82 95       	swap	r24
    191a:	92 95       	swap	r25
    191c:	90 7f       	andi	r25, 0xF0	; 240
    191e:	98 27       	eor	r25, r24
    1920:	80 7f       	andi	r24, 0xF0	; 240
    1922:	98 27       	eor	r25, r24
    1924:	28 2f       	mov	r18, r24
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	86 81       	ldd	r24, Z+6	; 0x06
    192c:	9a e0       	ldi	r25, 0x0A	; 10
    192e:	69 2f       	mov	r22, r25
    1930:	0e 94 0e 13 	call	0x261c	; 0x261c <__udivmodqi4>
    1934:	89 2f       	mov	r24, r25
    1936:	82 2b       	or	r24, r18
    1938:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>
	M_Void_I2C_STOP();
    193c:	0e 94 5e 07 	call	0xebc	; 0xebc <M_Void_I2C_STOP>
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <RTC_Get_Time>:

void RTC_Get_Time(Date_And_Time *Get_Time_And_Date)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <RTC_Get_Time+0x6>
    1950:	00 d0       	rcall	.+0      	; 0x1952 <RTC_Get_Time+0x8>
    1952:	0f 92       	push	r0
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	9d 83       	std	Y+5, r25	; 0x05
    195a:	8c 83       	std	Y+4, r24	; 0x04
	u8 temp_sec =0;
    195c:	1b 82       	std	Y+3, r1	; 0x03
	u8 temp_min =0;
    195e:	1a 82       	std	Y+2, r1	; 0x02
	u8 temp_hours =0;
    1960:	19 82       	std	Y+1, r1	; 0x01

	M_U8_I2C_Start();/*send the start bit*/
    1962:	0e 94 85 06 	call	0xd0a	; 0xd0a <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
    1966:	80 ed       	ldi	r24, 0xD0	; 208
    1968:	0e 94 a1 06 	call	0xd42	; 0xd42 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x00 in RTC to write the day*/
	M_U8_I2C_Write(RTC_SECONDS_REG_ADDRESS);
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();
    1972:	0e 94 ca 06 	call	0xd94	; 0xd94 <M_U8_I2C_Repeated_Start>
	/*send the slave address and read bit*/
	M_U8_I2C_SendSlaveAddressWithRead(RTC_SLAVE_ADDRESS_READ);
    1976:	81 ed       	ldi	r24, 0xD1	; 209
    1978:	0e 94 e6 06 	call	0xdcc	; 0xdcc <M_U8_I2C_SendSlaveAddressWithRead>
	temp_sec = M_U8_I2C_ReadWithAck();
    197c:	0e 94 38 07 	call	0xe70	; 0xe70 <M_U8_I2C_ReadWithAck>
    1980:	8b 83       	std	Y+3, r24	; 0x03
	/*get the seconds units + the tens seconds by >>4 then multiplied by 10*/
	Get_Time_And_Date -> sec = (temp_sec & 0x0F)+(((temp_sec & 0xF0)>>4)*10);
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	48 2f       	mov	r20, r24
    1986:	4f 70       	andi	r20, 0x0F	; 15
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	82 95       	swap	r24
    198c:	8f 70       	andi	r24, 0x0F	; 15
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	90 70       	andi	r25, 0x00	; 0
    1994:	9c 01       	movw	r18, r24
    1996:	22 0f       	add	r18, r18
    1998:	33 1f       	adc	r19, r19
    199a:	c9 01       	movw	r24, r18
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	82 0f       	add	r24, r18
    19a6:	93 1f       	adc	r25, r19
    19a8:	84 0f       	add	r24, r20
    19aa:	ec 81       	ldd	r30, Y+4	; 0x04
    19ac:	fd 81       	ldd	r31, Y+5	; 0x05
    19ae:	80 83       	st	Z, r24
	/*get the mins units + the tens mins by >>4 then multiplied by 10*/
	temp_min = M_U8_I2C_ReadWithAck();
    19b0:	0e 94 38 07 	call	0xe70	; 0xe70 <M_U8_I2C_ReadWithAck>
    19b4:	8a 83       	std	Y+2, r24	; 0x02
	Get_Time_And_Date -> min = (temp_min & 0x0F)+(((temp_min & 0xF0)>>4)*10);
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	48 2f       	mov	r20, r24
    19ba:	4f 70       	andi	r20, 0x0F	; 15
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	82 95       	swap	r24
    19c0:	8f 70       	andi	r24, 0x0F	; 15
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	90 70       	andi	r25, 0x00	; 0
    19c8:	9c 01       	movw	r18, r24
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	c9 01       	movw	r24, r18
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	82 0f       	add	r24, r18
    19da:	93 1f       	adc	r25, r19
    19dc:	84 0f       	add	r24, r20
    19de:	ec 81       	ldd	r30, Y+4	; 0x04
    19e0:	fd 81       	ldd	r31, Y+5	; 0x05
    19e2:	81 83       	std	Z+1, r24	; 0x01
	/*get the hours units + the tens hours by >>4 then multiplied by 10*/
	temp_hours = M_U8_I2C_ReadWithNack();
    19e4:	0e 94 4b 07 	call	0xe96	; 0xe96 <M_U8_I2C_ReadWithNack>
    19e8:	89 83       	std	Y+1, r24	; 0x01
	Get_Time_And_Date -> hours = (temp_hours & 0x0F)+(((temp_hours & 0xF0)>>4)*10);
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	48 2f       	mov	r20, r24
    19ee:	4f 70       	andi	r20, 0x0F	; 15
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	82 95       	swap	r24
    19f4:	8f 70       	andi	r24, 0x0F	; 15
    19f6:	88 2f       	mov	r24, r24
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	90 70       	andi	r25, 0x00	; 0
    19fc:	9c 01       	movw	r18, r24
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	c9 01       	movw	r24, r18
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	82 0f       	add	r24, r18
    1a0e:	93 1f       	adc	r25, r19
    1a10:	84 0f       	add	r24, r20
    1a12:	ec 81       	ldd	r30, Y+4	; 0x04
    1a14:	fd 81       	ldd	r31, Y+5	; 0x05
    1a16:	82 83       	std	Z+2, r24	; 0x02
	M_Void_I2C_STOP();
    1a18:	0e 94 5e 07 	call	0xebc	; 0xebc <M_Void_I2C_STOP>
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <RTC_Get_Date>:



void RTC_Get_Date(Date_And_Time *Get_Time_And_Date)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <RTC_Get_Date+0x6>
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <RTC_Get_Date+0x8>
    1a34:	0f 92       	push	r0
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	9d 83       	std	Y+5, r25	; 0x05
    1a3c:	8c 83       	std	Y+4, r24	; 0x04
	u8 temp_date =0;
    1a3e:	1b 82       	std	Y+3, r1	; 0x03
	u8 temp_month =0;
    1a40:	1a 82       	std	Y+2, r1	; 0x02
	u8 temp_year =0;
    1a42:	19 82       	std	Y+1, r1	; 0x01

	M_U8_I2C_Start();/*send the start bit*/
    1a44:	0e 94 85 06 	call	0xd0a	; 0xd0a <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
    1a48:	80 ed       	ldi	r24, 0xD0	; 208
    1a4a:	0e 94 a1 06 	call	0xd42	; 0xd42 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x03 in RTC to write the day*/
	M_U8_I2C_Write(RTC_DAYS_REG_ADDRESS);
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();
    1a54:	0e 94 ca 06 	call	0xd94	; 0xd94 <M_U8_I2C_Repeated_Start>
	/*send the slave address and read bit*/
	M_U8_I2C_SendSlaveAddressWithRead(RTC_SLAVE_ADDRESS_READ);
    1a58:	81 ed       	ldi	r24, 0xD1	; 209
    1a5a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <M_U8_I2C_SendSlaveAddressWithRead>
	Get_Time_And_Date -> day  = M_U8_I2C_ReadWithAck();
    1a5e:	0e 94 38 07 	call	0xe70	; 0xe70 <M_U8_I2C_ReadWithAck>
    1a62:	ec 81       	ldd	r30, Y+4	; 0x04
    1a64:	fd 81       	ldd	r31, Y+5	; 0x05
    1a66:	83 83       	std	Z+3, r24	; 0x03

	temp_date = M_U8_I2C_ReadWithAck();
    1a68:	0e 94 38 07 	call	0xe70	; 0xe70 <M_U8_I2C_ReadWithAck>
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
	/*get the seconds units + the tens seconds by >>4 then multiplied by 10*/
	Get_Time_And_Date -> date = (temp_date & 0x0F)+(((temp_date>>4)& 0x0F)*10);
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	48 2f       	mov	r20, r24
    1a72:	4f 70       	andi	r20, 0x0F	; 15
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	82 95       	swap	r24
    1a78:	8f 70       	andi	r24, 0x0F	; 15
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9c 01       	movw	r18, r24
    1a80:	22 0f       	add	r18, r18
    1a82:	33 1f       	adc	r19, r19
    1a84:	c9 01       	movw	r24, r18
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	82 0f       	add	r24, r18
    1a90:	93 1f       	adc	r25, r19
    1a92:	84 0f       	add	r24, r20
    1a94:	ec 81       	ldd	r30, Y+4	; 0x04
    1a96:	fd 81       	ldd	r31, Y+5	; 0x05
    1a98:	84 83       	std	Z+4, r24	; 0x04
	/*get the mins units + the tens mins by >>4 then multiplied by 10*/
	temp_month = M_U8_I2C_ReadWithAck();
    1a9a:	0e 94 38 07 	call	0xe70	; 0xe70 <M_U8_I2C_ReadWithAck>
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
	Get_Time_And_Date -> month = (temp_month & 0x0F)+(((temp_month>>4)& 0x0F)*10);
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	4f 70       	andi	r20, 0x0F	; 15
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	82 95       	swap	r24
    1aaa:	8f 70       	andi	r24, 0x0F	; 15
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c 01       	movw	r18, r24
    1ab2:	22 0f       	add	r18, r18
    1ab4:	33 1f       	adc	r19, r19
    1ab6:	c9 01       	movw	r24, r18
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	82 0f       	add	r24, r18
    1ac2:	93 1f       	adc	r25, r19
    1ac4:	84 0f       	add	r24, r20
    1ac6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac8:	fd 81       	ldd	r31, Y+5	; 0x05
    1aca:	85 83       	std	Z+5, r24	; 0x05
	/*get the hours units + the tens hours by >>4 then multiplied by 10*/
	temp_year = M_U8_I2C_ReadWithNack();
    1acc:	0e 94 4b 07 	call	0xe96	; 0xe96 <M_U8_I2C_ReadWithNack>
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	Get_Time_And_Date -> year = (temp_year & 0x0F)+(((temp_year>>4)& 0x0F)*10);
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	48 2f       	mov	r20, r24
    1ad6:	4f 70       	andi	r20, 0x0F	; 15
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	82 95       	swap	r24
    1adc:	8f 70       	andi	r24, 0x0F	; 15
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9c 01       	movw	r18, r24
    1ae4:	22 0f       	add	r18, r18
    1ae6:	33 1f       	adc	r19, r19
    1ae8:	c9 01       	movw	r24, r18
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	82 0f       	add	r24, r18
    1af4:	93 1f       	adc	r25, r19
    1af6:	84 0f       	add	r24, r20
    1af8:	ec 81       	ldd	r30, Y+4	; 0x04
    1afa:	fd 81       	ldd	r31, Y+5	; 0x05
    1afc:	86 83       	std	Z+6, r24	; 0x06
	M_Void_I2C_STOP();
    1afe:	0e 94 5e 07 	call	0xebc	; 0xebc <M_Void_I2C_STOP>
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1b1a:	84 e1       	ldi	r24, 0x14	; 20
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	0e 94 72 07 	call	0xee4	; 0xee4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    1b22:	85 e1       	ldi	r24, 0x15	; 21
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	0e 94 72 07 	call	0xee4	; 0xee4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    1b2a:	86 e1       	ldi	r24, 0x16	; 22
    1b2c:	61 e0       	ldi	r22, 0x01	; 1
    1b2e:	0e 94 72 07 	call	0xee4	; 0xee4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    1b32:	88 e1       	ldi	r24, 0x18	; 24
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	0e 94 72 07 	call	0xee4	; 0xee4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    1b3a:	8d e0       	ldi	r24, 0x0D	; 13
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	0e 94 72 07 	call	0xee4	; 0xee4 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    1b42:	8c e0       	ldi	r24, 0x0C	; 12
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	0e 94 72 07 	call	0xee4	; 0xee4 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    1b4a:	83 e3       	ldi	r24, 0x33	; 51
    1b4c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    1b50:	82 e3       	ldi	r24, 0x32	; 50
    1b52:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    1b56:	88 e2       	ldi	r24, 0x28	; 40
    1b58:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    1b5c:	8c e0       	ldi	r24, 0x0C	; 12
    1b5e:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	e9 97       	sbiw	r28, 0x39	; 57
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1b8a:	8d e0       	ldi	r24, 0x0D	; 13
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    1b92:	89 ad       	ldd	r24, Y+57	; 0x39
    1b94:	82 95       	swap	r24
    1b96:	8f 70       	andi	r24, 0x0F	; 15
    1b98:	98 2f       	mov	r25, r24
    1b9a:	91 70       	andi	r25, 0x01	; 1
    1b9c:	84 e1       	ldi	r24, 0x14	; 20
    1b9e:	69 2f       	mov	r22, r25
    1ba0:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    1ba4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ba6:	82 95       	swap	r24
    1ba8:	86 95       	lsr	r24
    1baa:	87 70       	andi	r24, 0x07	; 7
    1bac:	98 2f       	mov	r25, r24
    1bae:	91 70       	andi	r25, 0x01	; 1
    1bb0:	85 e1       	ldi	r24, 0x15	; 21
    1bb2:	69 2f       	mov	r22, r25
    1bb4:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    1bb8:	89 ad       	ldd	r24, Y+57	; 0x39
    1bba:	82 95       	swap	r24
    1bbc:	86 95       	lsr	r24
    1bbe:	86 95       	lsr	r24
    1bc0:	83 70       	andi	r24, 0x03	; 3
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	91 70       	andi	r25, 0x01	; 1
    1bc6:	86 e1       	ldi	r24, 0x16	; 22
    1bc8:	69 2f       	mov	r22, r25
    1bca:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    1bce:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	99 27       	eor	r25, r25
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	88 e1       	ldi	r24, 0x18	; 24
    1bda:	69 2f       	mov	r22, r25
    1bdc:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1be0:	8c e0       	ldi	r24, 0x0C	; 12
    1be2:	61 e0       	ldi	r22, 0x01	; 1
    1be4:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a0 e8       	ldi	r26, 0x80	; 128
    1bee:	bf e3       	ldi	r27, 0x3F	; 63
    1bf0:	8d ab       	std	Y+53, r24	; 0x35
    1bf2:	9e ab       	std	Y+54, r25	; 0x36
    1bf4:	af ab       	std	Y+55, r26	; 0x37
    1bf6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bfa:	7e a9       	ldd	r23, Y+54	; 0x36
    1bfc:	8f a9       	ldd	r24, Y+55	; 0x37
    1bfe:	98 ad       	ldd	r25, Y+56	; 0x38
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	55 e4       	ldi	r21, 0x45	; 69
    1c08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	89 ab       	std	Y+49, r24	; 0x31
    1c12:	9a ab       	std	Y+50, r25	; 0x32
    1c14:	ab ab       	std	Y+51, r26	; 0x33
    1c16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c18:	69 a9       	ldd	r22, Y+49	; 0x31
    1c1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	5f e3       	ldi	r21, 0x3F	; 63
    1c28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c2c:	88 23       	and	r24, r24
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	98 ab       	std	Y+48, r25	; 0x30
    1c36:	8f a7       	std	Y+47, r24	; 0x2f
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    1c3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c40:	9c a9       	ldd	r25, Y+52	; 0x34
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	4c f5       	brge	.+82     	; 0x1ca4 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	6d a9       	ldd	r22, Y+53	; 0x35
    1c54:	7e a9       	ldd	r23, Y+54	; 0x36
    1c56:	8f a9       	ldd	r24, Y+55	; 0x37
    1c58:	98 ad       	ldd	r25, Y+56	; 0x38
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	98 ab       	std	Y+48, r25	; 0x30
    1c78:	8f a7       	std	Y+47, r24	; 0x2f
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <H_Lcd_Void_LCDWriteCharacter+0x126>
    1c7c:	80 e9       	ldi	r24, 0x90	; 144
    1c7e:	91 e0       	ldi	r25, 0x01	; 1
    1c80:	9e a7       	std	Y+46, r25	; 0x2e
    1c82:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c84:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c86:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <H_Lcd_Void_LCDWriteCharacter+0x114>
    1c8c:	9e a7       	std	Y+46, r25	; 0x2e
    1c8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c92:	98 a9       	ldd	r25, Y+48	; 0x30
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	98 ab       	std	Y+48, r25	; 0x30
    1c98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <H_Lcd_Void_LCDWriteCharacter+0x108>
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca8:	8b a9       	ldd	r24, Y+51	; 0x33
    1caa:	9c a9       	ldd	r25, Y+52	; 0x34
    1cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	98 ab       	std	Y+48, r25	; 0x30
    1cb6:	8f a7       	std	Y+47, r24	; 0x2f
    1cb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cba:	98 a9       	ldd	r25, Y+48	; 0x30
    1cbc:	9c a7       	std	Y+44, r25	; 0x2c
    1cbe:	8b a7       	std	Y+43, r24	; 0x2b
    1cc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <H_Lcd_Void_LCDWriteCharacter+0x150>
    1cc8:	9c a7       	std	Y+44, r25	; 0x2c
    1cca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1ccc:	8c e0       	ldi	r24, 0x0C	; 12
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a0 e8       	ldi	r26, 0x80	; 128
    1cda:	bf e3       	ldi	r27, 0x3F	; 63
    1cdc:	8f a3       	std	Y+39, r24	; 0x27
    1cde:	98 a7       	std	Y+40, r25	; 0x28
    1ce0:	a9 a7       	std	Y+41, r26	; 0x29
    1ce2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ce8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a e7       	ldi	r20, 0x7A	; 122
    1cf2:	55 e4       	ldi	r21, 0x45	; 69
    1cf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	8b a3       	std	Y+35, r24	; 0x23
    1cfe:	9c a3       	std	Y+36, r25	; 0x24
    1d00:	ad a3       	std	Y+37, r26	; 0x25
    1d02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d04:	6b a1       	ldd	r22, Y+35	; 0x23
    1d06:	7c a1       	ldd	r23, Y+36	; 0x24
    1d08:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d18:	88 23       	and	r24, r24
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9a a3       	std	Y+34, r25	; 0x22
    1d22:	89 a3       	std	Y+33, r24	; 0x21
    1d24:	3f c0       	rjmp	.+126    	; 0x1da4 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    1d26:	6b a1       	ldd	r22, Y+35	; 0x23
    1d28:	7c a1       	ldd	r23, Y+36	; 0x24
    1d2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	3f ef       	ldi	r19, 0xFF	; 255
    1d32:	4f e7       	ldi	r20, 0x7F	; 127
    1d34:	57 e4       	ldi	r21, 0x47	; 71
    1d36:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d3a:	18 16       	cp	r1, r24
    1d3c:	4c f5       	brge	.+82     	; 0x1d90 <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d40:	78 a5       	ldd	r23, Y+40	; 0x28
    1d42:	89 a5       	ldd	r24, Y+41	; 0x29
    1d44:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e2       	ldi	r20, 0x20	; 32
    1d4c:	51 e4       	ldi	r21, 0x41	; 65
    1d4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9a a3       	std	Y+34, r25	; 0x22
    1d64:	89 a3       	std	Y+33, r24	; 0x21
    1d66:	0f c0       	rjmp	.+30     	; 0x1d86 <H_Lcd_Void_LCDWriteCharacter+0x212>
    1d68:	80 e9       	ldi	r24, 0x90	; 144
    1d6a:	91 e0       	ldi	r25, 0x01	; 1
    1d6c:	98 a3       	std	Y+32, r25	; 0x20
    1d6e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d72:	98 a1       	ldd	r25, Y+32	; 0x20
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <H_Lcd_Void_LCDWriteCharacter+0x200>
    1d78:	98 a3       	std	Y+32, r25	; 0x20
    1d7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	9a a3       	std	Y+34, r25	; 0x22
    1d84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d86:	89 a1       	ldd	r24, Y+33	; 0x21
    1d88:	9a a1       	ldd	r25, Y+34	; 0x22
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	69 f7       	brne	.-38     	; 0x1d68 <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    1d8e:	14 c0       	rjmp	.+40     	; 0x1db8 <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d90:	6b a1       	ldd	r22, Y+35	; 0x23
    1d92:	7c a1       	ldd	r23, Y+36	; 0x24
    1d94:	8d a1       	ldd	r24, Y+37	; 0x25
    1d96:	9e a1       	ldd	r25, Y+38	; 0x26
    1d98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9a a3       	std	Y+34, r25	; 0x22
    1da2:	89 a3       	std	Y+33, r24	; 0x21
    1da4:	89 a1       	ldd	r24, Y+33	; 0x21
    1da6:	9a a1       	ldd	r25, Y+34	; 0x22
    1da8:	9e 8f       	std	Y+30, r25	; 0x1e
    1daa:	8d 8f       	std	Y+29, r24	; 0x1d
    1dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <H_Lcd_Void_LCDWriteCharacter+0x23c>
    1db4:	9e 8f       	std	Y+30, r25	; 0x1e
    1db6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    1db8:	89 ad       	ldd	r24, Y+57	; 0x39
    1dba:	98 2f       	mov	r25, r24
    1dbc:	91 70       	andi	r25, 0x01	; 1
    1dbe:	84 e1       	ldi	r24, 0x14	; 20
    1dc0:	69 2f       	mov	r22, r25
    1dc2:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    1dc6:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc8:	86 95       	lsr	r24
    1dca:	98 2f       	mov	r25, r24
    1dcc:	91 70       	andi	r25, 0x01	; 1
    1dce:	85 e1       	ldi	r24, 0x15	; 21
    1dd0:	69 2f       	mov	r22, r25
    1dd2:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    1dd6:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd8:	86 95       	lsr	r24
    1dda:	86 95       	lsr	r24
    1ddc:	98 2f       	mov	r25, r24
    1dde:	91 70       	andi	r25, 0x01	; 1
    1de0:	86 e1       	ldi	r24, 0x16	; 22
    1de2:	69 2f       	mov	r22, r25
    1de4:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    1de8:	89 ad       	ldd	r24, Y+57	; 0x39
    1dea:	86 95       	lsr	r24
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	98 2f       	mov	r25, r24
    1df2:	91 70       	andi	r25, 0x01	; 1
    1df4:	88 e1       	ldi	r24, 0x18	; 24
    1df6:	69 2f       	mov	r22, r25
    1df8:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1dfc:	8c e0       	ldi	r24, 0x0C	; 12
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 e8       	ldi	r26, 0x80	; 128
    1e0a:	bf e3       	ldi	r27, 0x3F	; 63
    1e0c:	89 8f       	std	Y+25, r24	; 0x19
    1e0e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e10:	ab 8f       	std	Y+27, r26	; 0x1b
    1e12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	69 8d       	ldd	r22, Y+25	; 0x19
    1e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	4a e7       	ldi	r20, 0x7A	; 122
    1e22:	55 e4       	ldi	r21, 0x45	; 69
    1e24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	8d 8b       	std	Y+21, r24	; 0x15
    1e2e:	9e 8b       	std	Y+22, r25	; 0x16
    1e30:	af 8b       	std	Y+23, r26	; 0x17
    1e32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e34:	6d 89       	ldd	r22, Y+21	; 0x15
    1e36:	7e 89       	ldd	r23, Y+22	; 0x16
    1e38:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	9c 8b       	std	Y+20, r25	; 0x14
    1e52:	8b 8b       	std	Y+19, r24	; 0x13
    1e54:	3f c0       	rjmp	.+126    	; 0x1ed4 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    1e56:	6d 89       	ldd	r22, Y+21	; 0x15
    1e58:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	57 e4       	ldi	r21, 0x47	; 71
    1e66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	4c f5       	brge	.+82     	; 0x1ec0 <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e2       	ldi	r20, 0x20	; 32
    1e7c:	51 e4       	ldi	r21, 0x41	; 65
    1e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9c 8b       	std	Y+20, r25	; 0x14
    1e94:	8b 8b       	std	Y+19, r24	; 0x13
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <H_Lcd_Void_LCDWriteCharacter+0x342>
    1e98:	80 e9       	ldi	r24, 0x90	; 144
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	9a 8b       	std	Y+18, r25	; 0x12
    1e9e:	89 8b       	std	Y+17, r24	; 0x11
    1ea0:	89 89       	ldd	r24, Y+17	; 0x11
    1ea2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <H_Lcd_Void_LCDWriteCharacter+0x330>
    1ea8:	9a 8b       	std	Y+18, r25	; 0x12
    1eaa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eac:	8b 89       	ldd	r24, Y+19	; 0x13
    1eae:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	9c 8b       	std	Y+20, r25	; 0x14
    1eb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	69 f7       	brne	.-38     	; 0x1e98 <H_Lcd_Void_LCDWriteCharacter+0x324>
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9c 8b       	std	Y+20, r25	; 0x14
    1ed2:	8b 8b       	std	Y+19, r24	; 0x13
    1ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed8:	98 8b       	std	Y+16, r25	; 0x10
    1eda:	8f 87       	std	Y+15, r24	; 0x0f
    1edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ede:	98 89       	ldd	r25, Y+16	; 0x10
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <H_Lcd_Void_LCDWriteCharacter+0x36c>
    1ee4:	98 8b       	std	Y+16, r25	; 0x10
    1ee6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1ee8:	8c e0       	ldi	r24, 0x0C	; 12
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ef6:	b0 e4       	ldi	r27, 0x40	; 64
    1ef8:	8b 87       	std	Y+11, r24	; 0x0b
    1efa:	9c 87       	std	Y+12, r25	; 0x0c
    1efc:	ad 87       	std	Y+13, r26	; 0x0d
    1efe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a e7       	ldi	r20, 0x7A	; 122
    1f0e:	55 e4       	ldi	r21, 0x45	; 69
    1f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	8f 83       	std	Y+7, r24	; 0x07
    1f1a:	98 87       	std	Y+8, r25	; 0x08
    1f1c:	a9 87       	std	Y+9, r26	; 0x09
    1f1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <H_Lcd_Void_LCDWriteCharacter+0x42e>
    1f84:	80 e9       	ldi	r24, 0x90	; 144
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <H_Lcd_Void_LCDWriteCharacter+0x41c>
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <H_Lcd_Void_LCDWriteCharacter+0x410>
    1faa:	14 c0       	rjmp	.+40     	; 0x1fd4 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	6f 81       	ldd	r22, Y+7	; 0x07
    1fae:	78 85       	ldd	r23, Y+8	; 0x08
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <H_Lcd_Void_LCDWriteCharacter+0x458>
    1fd0:	9a 83       	std	Y+2, r25	; 0x02
    1fd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    1fd4:	e9 96       	adiw	r28, 0x39	; 57
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	e9 97       	sbiw	r28, 0x39	; 57
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1ffc:	8d e0       	ldi	r24, 0x0D	; 13
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    2004:	89 ad       	ldd	r24, Y+57	; 0x39
    2006:	82 95       	swap	r24
    2008:	8f 70       	andi	r24, 0x0F	; 15
    200a:	98 2f       	mov	r25, r24
    200c:	91 70       	andi	r25, 0x01	; 1
    200e:	84 e1       	ldi	r24, 0x14	; 20
    2010:	69 2f       	mov	r22, r25
    2012:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    2016:	89 ad       	ldd	r24, Y+57	; 0x39
    2018:	82 95       	swap	r24
    201a:	86 95       	lsr	r24
    201c:	87 70       	andi	r24, 0x07	; 7
    201e:	98 2f       	mov	r25, r24
    2020:	91 70       	andi	r25, 0x01	; 1
    2022:	85 e1       	ldi	r24, 0x15	; 21
    2024:	69 2f       	mov	r22, r25
    2026:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    202a:	89 ad       	ldd	r24, Y+57	; 0x39
    202c:	82 95       	swap	r24
    202e:	86 95       	lsr	r24
    2030:	86 95       	lsr	r24
    2032:	83 70       	andi	r24, 0x03	; 3
    2034:	98 2f       	mov	r25, r24
    2036:	91 70       	andi	r25, 0x01	; 1
    2038:	86 e1       	ldi	r24, 0x16	; 22
    203a:	69 2f       	mov	r22, r25
    203c:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    2040:	89 ad       	ldd	r24, Y+57	; 0x39
    2042:	98 2f       	mov	r25, r24
    2044:	99 1f       	adc	r25, r25
    2046:	99 27       	eor	r25, r25
    2048:	99 1f       	adc	r25, r25
    204a:	88 e1       	ldi	r24, 0x18	; 24
    204c:	69 2f       	mov	r22, r25
    204e:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2052:	8c e0       	ldi	r24, 0x0C	; 12
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a0 e8       	ldi	r26, 0x80	; 128
    2060:	bf e3       	ldi	r27, 0x3F	; 63
    2062:	8d ab       	std	Y+53, r24	; 0x35
    2064:	9e ab       	std	Y+54, r25	; 0x36
    2066:	af ab       	std	Y+55, r26	; 0x37
    2068:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206a:	6d a9       	ldd	r22, Y+53	; 0x35
    206c:	7e a9       	ldd	r23, Y+54	; 0x36
    206e:	8f a9       	ldd	r24, Y+55	; 0x37
    2070:	98 ad       	ldd	r25, Y+56	; 0x38
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	55 e4       	ldi	r21, 0x45	; 69
    207a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	89 ab       	std	Y+49, r24	; 0x31
    2084:	9a ab       	std	Y+50, r25	; 0x32
    2086:	ab ab       	std	Y+51, r26	; 0x33
    2088:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    208a:	69 a9       	ldd	r22, Y+49	; 0x31
    208c:	7a a9       	ldd	r23, Y+50	; 0x32
    208e:	8b a9       	ldd	r24, Y+51	; 0x33
    2090:	9c a9       	ldd	r25, Y+52	; 0x34
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    209e:	88 23       	and	r24, r24
    20a0:	2c f4       	brge	.+10     	; 0x20ac <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	98 ab       	std	Y+48, r25	; 0x30
    20a8:	8f a7       	std	Y+47, r24	; 0x2f
    20aa:	3f c0       	rjmp	.+126    	; 0x212a <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    20ac:	69 a9       	ldd	r22, Y+49	; 0x31
    20ae:	7a a9       	ldd	r23, Y+50	; 0x32
    20b0:	8b a9       	ldd	r24, Y+51	; 0x33
    20b2:	9c a9       	ldd	r25, Y+52	; 0x34
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	3f ef       	ldi	r19, 0xFF	; 255
    20b8:	4f e7       	ldi	r20, 0x7F	; 127
    20ba:	57 e4       	ldi	r21, 0x47	; 71
    20bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20c0:	18 16       	cp	r1, r24
    20c2:	4c f5       	brge	.+82     	; 0x2116 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c4:	6d a9       	ldd	r22, Y+53	; 0x35
    20c6:	7e a9       	ldd	r23, Y+54	; 0x36
    20c8:	8f a9       	ldd	r24, Y+55	; 0x37
    20ca:	98 ad       	ldd	r25, Y+56	; 0x38
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	98 ab       	std	Y+48, r25	; 0x30
    20ea:	8f a7       	std	Y+47, r24	; 0x2f
    20ec:	0f c0       	rjmp	.+30     	; 0x210c <H_Lcd_Void_LCDWriteCommand+0x126>
    20ee:	80 e9       	ldi	r24, 0x90	; 144
    20f0:	91 e0       	ldi	r25, 0x01	; 1
    20f2:	9e a7       	std	Y+46, r25	; 0x2e
    20f4:	8d a7       	std	Y+45, r24	; 0x2d
    20f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    20f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <H_Lcd_Void_LCDWriteCommand+0x114>
    20fe:	9e a7       	std	Y+46, r25	; 0x2e
    2100:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	8f a5       	ldd	r24, Y+47	; 0x2f
    2104:	98 a9       	ldd	r25, Y+48	; 0x30
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	98 ab       	std	Y+48, r25	; 0x30
    210a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210c:	8f a5       	ldd	r24, Y+47	; 0x2f
    210e:	98 a9       	ldd	r25, Y+48	; 0x30
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	69 f7       	brne	.-38     	; 0x20ee <H_Lcd_Void_LCDWriteCommand+0x108>
    2114:	14 c0       	rjmp	.+40     	; 0x213e <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2116:	69 a9       	ldd	r22, Y+49	; 0x31
    2118:	7a a9       	ldd	r23, Y+50	; 0x32
    211a:	8b a9       	ldd	r24, Y+51	; 0x33
    211c:	9c a9       	ldd	r25, Y+52	; 0x34
    211e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	98 ab       	std	Y+48, r25	; 0x30
    2128:	8f a7       	std	Y+47, r24	; 0x2f
    212a:	8f a5       	ldd	r24, Y+47	; 0x2f
    212c:	98 a9       	ldd	r25, Y+48	; 0x30
    212e:	9c a7       	std	Y+44, r25	; 0x2c
    2130:	8b a7       	std	Y+43, r24	; 0x2b
    2132:	8b a5       	ldd	r24, Y+43	; 0x2b
    2134:	9c a5       	ldd	r25, Y+44	; 0x2c
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <H_Lcd_Void_LCDWriteCommand+0x150>
    213a:	9c a7       	std	Y+44, r25	; 0x2c
    213c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    213e:	8c e0       	ldi	r24, 0x0C	; 12
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a0 e8       	ldi	r26, 0x80	; 128
    214c:	bf e3       	ldi	r27, 0x3F	; 63
    214e:	8f a3       	std	Y+39, r24	; 0x27
    2150:	98 a7       	std	Y+40, r25	; 0x28
    2152:	a9 a7       	std	Y+41, r26	; 0x29
    2154:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2156:	6f a1       	ldd	r22, Y+39	; 0x27
    2158:	78 a5       	ldd	r23, Y+40	; 0x28
    215a:	89 a5       	ldd	r24, Y+41	; 0x29
    215c:	9a a5       	ldd	r25, Y+42	; 0x2a
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	4a e7       	ldi	r20, 0x7A	; 122
    2164:	55 e4       	ldi	r21, 0x45	; 69
    2166:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	8b a3       	std	Y+35, r24	; 0x23
    2170:	9c a3       	std	Y+36, r25	; 0x24
    2172:	ad a3       	std	Y+37, r26	; 0x25
    2174:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2176:	6b a1       	ldd	r22, Y+35	; 0x23
    2178:	7c a1       	ldd	r23, Y+36	; 0x24
    217a:	8d a1       	ldd	r24, Y+37	; 0x25
    217c:	9e a1       	ldd	r25, Y+38	; 0x26
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e8       	ldi	r20, 0x80	; 128
    2184:	5f e3       	ldi	r21, 0x3F	; 63
    2186:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    218a:	88 23       	and	r24, r24
    218c:	2c f4       	brge	.+10     	; 0x2198 <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	9a a3       	std	Y+34, r25	; 0x22
    2194:	89 a3       	std	Y+33, r24	; 0x21
    2196:	3f c0       	rjmp	.+126    	; 0x2216 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    2198:	6b a1       	ldd	r22, Y+35	; 0x23
    219a:	7c a1       	ldd	r23, Y+36	; 0x24
    219c:	8d a1       	ldd	r24, Y+37	; 0x25
    219e:	9e a1       	ldd	r25, Y+38	; 0x26
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	3f ef       	ldi	r19, 0xFF	; 255
    21a4:	4f e7       	ldi	r20, 0x7F	; 127
    21a6:	57 e4       	ldi	r21, 0x47	; 71
    21a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21ac:	18 16       	cp	r1, r24
    21ae:	4c f5       	brge	.+82     	; 0x2202 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b0:	6f a1       	ldd	r22, Y+39	; 0x27
    21b2:	78 a5       	ldd	r23, Y+40	; 0x28
    21b4:	89 a5       	ldd	r24, Y+41	; 0x29
    21b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e2       	ldi	r20, 0x20	; 32
    21be:	51 e4       	ldi	r21, 0x41	; 65
    21c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9a a3       	std	Y+34, r25	; 0x22
    21d6:	89 a3       	std	Y+33, r24	; 0x21
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <H_Lcd_Void_LCDWriteCommand+0x212>
    21da:	80 e9       	ldi	r24, 0x90	; 144
    21dc:	91 e0       	ldi	r25, 0x01	; 1
    21de:	98 a3       	std	Y+32, r25	; 0x20
    21e0:	8f 8f       	std	Y+31, r24	; 0x1f
    21e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e4:	98 a1       	ldd	r25, Y+32	; 0x20
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <H_Lcd_Void_LCDWriteCommand+0x200>
    21ea:	98 a3       	std	Y+32, r25	; 0x20
    21ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ee:	89 a1       	ldd	r24, Y+33	; 0x21
    21f0:	9a a1       	ldd	r25, Y+34	; 0x22
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	9a a3       	std	Y+34, r25	; 0x22
    21f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f8:	89 a1       	ldd	r24, Y+33	; 0x21
    21fa:	9a a1       	ldd	r25, Y+34	; 0x22
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	69 f7       	brne	.-38     	; 0x21da <H_Lcd_Void_LCDWriteCommand+0x1f4>
    2200:	14 c0       	rjmp	.+40     	; 0x222a <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2202:	6b a1       	ldd	r22, Y+35	; 0x23
    2204:	7c a1       	ldd	r23, Y+36	; 0x24
    2206:	8d a1       	ldd	r24, Y+37	; 0x25
    2208:	9e a1       	ldd	r25, Y+38	; 0x26
    220a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9a a3       	std	Y+34, r25	; 0x22
    2214:	89 a3       	std	Y+33, r24	; 0x21
    2216:	89 a1       	ldd	r24, Y+33	; 0x21
    2218:	9a a1       	ldd	r25, Y+34	; 0x22
    221a:	9e 8f       	std	Y+30, r25	; 0x1e
    221c:	8d 8f       	std	Y+29, r24	; 0x1d
    221e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2220:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <H_Lcd_Void_LCDWriteCommand+0x23c>
    2226:	9e 8f       	std	Y+30, r25	; 0x1e
    2228:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    222a:	89 ad       	ldd	r24, Y+57	; 0x39
    222c:	98 2f       	mov	r25, r24
    222e:	91 70       	andi	r25, 0x01	; 1
    2230:	84 e1       	ldi	r24, 0x14	; 20
    2232:	69 2f       	mov	r22, r25
    2234:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    2238:	89 ad       	ldd	r24, Y+57	; 0x39
    223a:	86 95       	lsr	r24
    223c:	98 2f       	mov	r25, r24
    223e:	91 70       	andi	r25, 0x01	; 1
    2240:	85 e1       	ldi	r24, 0x15	; 21
    2242:	69 2f       	mov	r22, r25
    2244:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    2248:	89 ad       	ldd	r24, Y+57	; 0x39
    224a:	86 95       	lsr	r24
    224c:	86 95       	lsr	r24
    224e:	98 2f       	mov	r25, r24
    2250:	91 70       	andi	r25, 0x01	; 1
    2252:	86 e1       	ldi	r24, 0x16	; 22
    2254:	69 2f       	mov	r22, r25
    2256:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    225a:	89 ad       	ldd	r24, Y+57	; 0x39
    225c:	86 95       	lsr	r24
    225e:	86 95       	lsr	r24
    2260:	86 95       	lsr	r24
    2262:	98 2f       	mov	r25, r24
    2264:	91 70       	andi	r25, 0x01	; 1
    2266:	88 e1       	ldi	r24, 0x18	; 24
    2268:	69 2f       	mov	r22, r25
    226a:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    226e:	8c e0       	ldi	r24, 0x0C	; 12
    2270:	61 e0       	ldi	r22, 0x01	; 1
    2272:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e8       	ldi	r26, 0x80	; 128
    227c:	bf e3       	ldi	r27, 0x3F	; 63
    227e:	89 8f       	std	Y+25, r24	; 0x19
    2280:	9a 8f       	std	Y+26, r25	; 0x1a
    2282:	ab 8f       	std	Y+27, r26	; 0x1b
    2284:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	69 8d       	ldd	r22, Y+25	; 0x19
    2288:	7a 8d       	ldd	r23, Y+26	; 0x1a
    228a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a e7       	ldi	r20, 0x7A	; 122
    2294:	55 e4       	ldi	r21, 0x45	; 69
    2296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8d 8b       	std	Y+21, r24	; 0x15
    22a0:	9e 8b       	std	Y+22, r25	; 0x16
    22a2:	af 8b       	std	Y+23, r26	; 0x17
    22a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22a6:	6d 89       	ldd	r22, Y+21	; 0x15
    22a8:	7e 89       	ldd	r23, Y+22	; 0x16
    22aa:	8f 89       	ldd	r24, Y+23	; 0x17
    22ac:	98 8d       	ldd	r25, Y+24	; 0x18
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e8       	ldi	r20, 0x80	; 128
    22b4:	5f e3       	ldi	r21, 0x3F	; 63
    22b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ba:	88 23       	and	r24, r24
    22bc:	2c f4       	brge	.+10     	; 0x22c8 <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
    22c6:	3f c0       	rjmp	.+126    	; 0x2346 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    22c8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ca:	7e 89       	ldd	r23, Y+22	; 0x16
    22cc:	8f 89       	ldd	r24, Y+23	; 0x17
    22ce:	98 8d       	ldd	r25, Y+24	; 0x18
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	3f ef       	ldi	r19, 0xFF	; 255
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	57 e4       	ldi	r21, 0x47	; 71
    22d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	4c f5       	brge	.+82     	; 0x2332 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	69 8d       	ldd	r22, Y+25	; 0x19
    22e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9c 8b       	std	Y+20, r25	; 0x14
    2306:	8b 8b       	std	Y+19, r24	; 0x13
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <H_Lcd_Void_LCDWriteCommand+0x342>
    230a:	80 e9       	ldi	r24, 0x90	; 144
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	9a 8b       	std	Y+18, r25	; 0x12
    2310:	89 8b       	std	Y+17, r24	; 0x11
    2312:	89 89       	ldd	r24, Y+17	; 0x11
    2314:	9a 89       	ldd	r25, Y+18	; 0x12
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <H_Lcd_Void_LCDWriteCommand+0x330>
    231a:	9a 8b       	std	Y+18, r25	; 0x12
    231c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231e:	8b 89       	ldd	r24, Y+19	; 0x13
    2320:	9c 89       	ldd	r25, Y+20	; 0x14
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	9c 8b       	std	Y+20, r25	; 0x14
    2326:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	69 f7       	brne	.-38     	; 0x230a <H_Lcd_Void_LCDWriteCommand+0x324>
    2330:	14 c0       	rjmp	.+40     	; 0x235a <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2332:	6d 89       	ldd	r22, Y+21	; 0x15
    2334:	7e 89       	ldd	r23, Y+22	; 0x16
    2336:	8f 89       	ldd	r24, Y+23	; 0x17
    2338:	98 8d       	ldd	r25, Y+24	; 0x18
    233a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9c 8b       	std	Y+20, r25	; 0x14
    2344:	8b 8b       	std	Y+19, r24	; 0x13
    2346:	8b 89       	ldd	r24, Y+19	; 0x13
    2348:	9c 89       	ldd	r25, Y+20	; 0x14
    234a:	98 8b       	std	Y+16, r25	; 0x10
    234c:	8f 87       	std	Y+15, r24	; 0x0f
    234e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2350:	98 89       	ldd	r25, Y+16	; 0x10
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <H_Lcd_Void_LCDWriteCommand+0x36c>
    2356:	98 8b       	std	Y+16, r25	; 0x10
    2358:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    235a:	8c e0       	ldi	r24, 0x0C	; 12
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	0e 94 88 08 	call	0x1110	; 0x1110 <M_DIO_Void_SetPinValue>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a0 ea       	ldi	r26, 0xA0	; 160
    2368:	b0 e4       	ldi	r27, 0x40	; 64
    236a:	8b 87       	std	Y+11, r24	; 0x0b
    236c:	9c 87       	std	Y+12, r25	; 0x0c
    236e:	ad 87       	std	Y+13, r26	; 0x0d
    2370:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	6b 85       	ldd	r22, Y+11	; 0x0b
    2374:	7c 85       	ldd	r23, Y+12	; 0x0c
    2376:	8d 85       	ldd	r24, Y+13	; 0x0d
    2378:	9e 85       	ldd	r25, Y+14	; 0x0e
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a e7       	ldi	r20, 0x7A	; 122
    2380:	55 e4       	ldi	r21, 0x45	; 69
    2382:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8f 83       	std	Y+7, r24	; 0x07
    238c:	98 87       	std	Y+8, r25	; 0x08
    238e:	a9 87       	std	Y+9, r26	; 0x09
    2390:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	2c f4       	brge	.+10     	; 0x23b4 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	4c f5       	brge	.+82     	; 0x241e <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <H_Lcd_Void_LCDWriteCommand+0x42e>
    23f6:	80 e9       	ldi	r24, 0x90	; 144
    23f8:	91 e0       	ldi	r25, 0x01	; 1
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	9c 81       	ldd	r25, Y+4	; 0x04
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <H_Lcd_Void_LCDWriteCommand+0x41c>
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f7       	brne	.-38     	; 0x23f6 <H_Lcd_Void_LCDWriteCommand+0x410>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241e:	6f 81       	ldd	r22, Y+7	; 0x07
    2420:	78 85       	ldd	r23, Y+8	; 0x08
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <H_Lcd_Void_LCDWriteCommand+0x458>
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    2446:	e9 96       	adiw	r28, 0x39	; 57
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <H_Lcd_Void_LCDWriteString+0x6>
    245e:	0f 92       	push	r0
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9b 83       	std	Y+3, r25	; 0x03
    2466:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    2468:	19 82       	std	Y+1, r1	; 0x01
    246a:	0e c0       	rjmp	.+28     	; 0x2488 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	9b 81       	ldd	r25, Y+3	; 0x03
    2476:	fc 01       	movw	r30, r24
    2478:	e2 0f       	add	r30, r18
    247a:	f3 1f       	adc	r31, r19
    247c:	80 81       	ld	r24, Z
    247e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	8f 5f       	subi	r24, 0xFF	; 255
    2486:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	9b 81       	ldd	r25, Y+3	; 0x03
    2492:	fc 01       	movw	r30, r24
    2494:	e2 0f       	add	r30, r18
    2496:	f3 1f       	adc	r31, r19
    2498:	80 81       	ld	r24, Z
    249a:	88 23       	and	r24, r24
    249c:	39 f7       	brne	.-50     	; 0x246c <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <H_Lcd_Void_LCDWriteCommand>
}
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	2f 97       	sbiw	r28, 0x0f	; 15
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	6c 87       	std	Y+12, r22	; 0x0c
    24d8:	7d 87       	std	Y+13, r23	; 0x0d
    24da:	8e 87       	std	Y+14, r24	; 0x0e
    24dc:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    24de:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    24e0:	8a e0       	ldi	r24, 0x0A	; 10
    24e2:	fe 01       	movw	r30, r28
    24e4:	32 96       	adiw	r30, 0x02	; 2
    24e6:	df 01       	movw	r26, r30
    24e8:	98 2f       	mov	r25, r24
    24ea:	1d 92       	st	X+, r1
    24ec:	9a 95       	dec	r25
    24ee:	e9 f7       	brne	.-6      	; 0x24ea <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    24f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    24f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    24f4:	ae 85       	ldd	r26, Y+14	; 0x0e
    24f6:	bf 85       	ldd	r27, Y+15	; 0x0f
    24f8:	bb 23       	and	r27, r27
    24fa:	94 f4       	brge	.+36     	; 0x2520 <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    24fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    24fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2500:	ae 85       	ldd	r26, Y+14	; 0x0e
    2502:	bf 85       	ldd	r27, Y+15	; 0x0f
    2504:	b0 95       	com	r27
    2506:	a0 95       	com	r26
    2508:	90 95       	com	r25
    250a:	81 95       	neg	r24
    250c:	9f 4f       	sbci	r25, 0xFF	; 255
    250e:	af 4f       	sbci	r26, 0xFF	; 255
    2510:	bf 4f       	sbci	r27, 0xFF	; 255
    2512:	8c 87       	std	Y+12, r24	; 0x0c
    2514:	9d 87       	std	Y+13, r25	; 0x0d
    2516:	ae 87       	std	Y+14, r26	; 0x0e
    2518:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    251a:	8d e2       	ldi	r24, 0x2D	; 45
    251c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	08 2f       	mov	r16, r24
    2524:	11 27       	eor	r17, r17
    2526:	07 fd       	sbrc	r16, 7
    2528:	10 95       	com	r17
    252a:	8c 85       	ldd	r24, Y+12	; 0x0c
    252c:	9d 85       	ldd	r25, Y+13	; 0x0d
    252e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2530:	bf 85       	ldd	r27, Y+15	; 0x0f
    2532:	2a e0       	ldi	r18, 0x0A	; 10
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 3c 13 	call	0x2678	; 0x2678 <__divmodsi4>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	28 2f       	mov	r18, r24
    2548:	ce 01       	movw	r24, r28
    254a:	02 96       	adiw	r24, 0x02	; 2
    254c:	fc 01       	movw	r30, r24
    254e:	e0 0f       	add	r30, r16
    2550:	f1 1f       	adc	r31, r17
    2552:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    2554:	8c 85       	ldd	r24, Y+12	; 0x0c
    2556:	9d 85       	ldd	r25, Y+13	; 0x0d
    2558:	ae 85       	ldd	r26, Y+14	; 0x0e
    255a:	bf 85       	ldd	r27, Y+15	; 0x0f
    255c:	2a e0       	ldi	r18, 0x0A	; 10
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 3c 13 	call	0x2678	; 0x2678 <__divmodsi4>
    256c:	da 01       	movw	r26, r20
    256e:	c9 01       	movw	r24, r18
    2570:	8c 87       	std	Y+12, r24	; 0x0c
    2572:	9d 87       	std	Y+13, r25	; 0x0d
    2574:	ae 87       	std	Y+14, r26	; 0x0e
    2576:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	8f 5f       	subi	r24, 0xFF	; 255
    257c:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    257e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2580:	9d 85       	ldd	r25, Y+13	; 0x0d
    2582:	ae 85       	ldd	r26, Y+14	; 0x0e
    2584:	bf 85       	ldd	r27, Y+15	; 0x0f
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	a1 05       	cpc	r26, r1
    258a:	b1 05       	cpc	r27, r1
    258c:	49 f6       	brne	.-110    	; 0x2520 <H_Lcd_Void_LCDWriteNumber+0x62>
    258e:	11 c0       	rjmp	.+34     	; 0x25b2 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	81 50       	subi	r24, 0x01	; 1
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	28 2f       	mov	r18, r24
    259a:	33 27       	eor	r19, r19
    259c:	27 fd       	sbrc	r18, 7
    259e:	30 95       	com	r19
    25a0:	ce 01       	movw	r24, r28
    25a2:	02 96       	adiw	r24, 0x02	; 2
    25a4:	fc 01       	movw	r30, r24
    25a6:	e2 0f       	add	r30, r18
    25a8:	f3 1f       	adc	r31, r19
    25aa:	80 81       	ld	r24, Z
    25ac:	80 5d       	subi	r24, 0xD0	; 208
    25ae:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	18 16       	cp	r1, r24
    25b6:	64 f3       	brlt	.-40     	; 0x2590 <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    25b8:	2f 96       	adiw	r28, 0x0f	; 15
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <H_Lcd_Void_LCDGoTo+0x6>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <H_Lcd_Void_LCDGoTo+0x8>
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <H_Lcd_Void_LCDGoTo+0xa>
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	8d 83       	std	Y+5, r24	; 0x05
    25de:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    25e0:	80 e8       	ldi	r24, 0x80	; 128
    25e2:	89 83       	std	Y+1, r24	; 0x01
    25e4:	80 ec       	ldi	r24, 0xC0	; 192
    25e6:	8a 83       	std	Y+2, r24	; 0x02
    25e8:	84 e9       	ldi	r24, 0x94	; 148
    25ea:	8b 83       	std	Y+3, r24	; 0x03
    25ec:	84 ed       	ldi	r24, 0xD4	; 212
    25ee:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    25f0:	8d 81       	ldd	r24, Y+5	; 0x05
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	ce 01       	movw	r24, r28
    25f8:	01 96       	adiw	r24, 0x01	; 1
    25fa:	fc 01       	movw	r30, r24
    25fc:	e2 0f       	add	r30, r18
    25fe:	f3 1f       	adc	r31, r19
    2600:	90 81       	ld	r25, Z
    2602:	8e 81       	ldd	r24, Y+6	; 0x06
    2604:	89 0f       	add	r24, r25
    2606:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <H_Lcd_Void_LCDWriteCommand>
}
    260a:	26 96       	adiw	r28, 0x06	; 6
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <__udivmodqi4>:
    261c:	99 1b       	sub	r25, r25
    261e:	79 e0       	ldi	r23, 0x09	; 9
    2620:	04 c0       	rjmp	.+8      	; 0x262a <__udivmodqi4_ep>

00002622 <__udivmodqi4_loop>:
    2622:	99 1f       	adc	r25, r25
    2624:	96 17       	cp	r25, r22
    2626:	08 f0       	brcs	.+2      	; 0x262a <__udivmodqi4_ep>
    2628:	96 1b       	sub	r25, r22

0000262a <__udivmodqi4_ep>:
    262a:	88 1f       	adc	r24, r24
    262c:	7a 95       	dec	r23
    262e:	c9 f7       	brne	.-14     	; 0x2622 <__udivmodqi4_loop>
    2630:	80 95       	com	r24
    2632:	08 95       	ret

00002634 <__udivmodsi4>:
    2634:	a1 e2       	ldi	r26, 0x21	; 33
    2636:	1a 2e       	mov	r1, r26
    2638:	aa 1b       	sub	r26, r26
    263a:	bb 1b       	sub	r27, r27
    263c:	fd 01       	movw	r30, r26
    263e:	0d c0       	rjmp	.+26     	; 0x265a <__udivmodsi4_ep>

00002640 <__udivmodsi4_loop>:
    2640:	aa 1f       	adc	r26, r26
    2642:	bb 1f       	adc	r27, r27
    2644:	ee 1f       	adc	r30, r30
    2646:	ff 1f       	adc	r31, r31
    2648:	a2 17       	cp	r26, r18
    264a:	b3 07       	cpc	r27, r19
    264c:	e4 07       	cpc	r30, r20
    264e:	f5 07       	cpc	r31, r21
    2650:	20 f0       	brcs	.+8      	; 0x265a <__udivmodsi4_ep>
    2652:	a2 1b       	sub	r26, r18
    2654:	b3 0b       	sbc	r27, r19
    2656:	e4 0b       	sbc	r30, r20
    2658:	f5 0b       	sbc	r31, r21

0000265a <__udivmodsi4_ep>:
    265a:	66 1f       	adc	r22, r22
    265c:	77 1f       	adc	r23, r23
    265e:	88 1f       	adc	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	1a 94       	dec	r1
    2664:	69 f7       	brne	.-38     	; 0x2640 <__udivmodsi4_loop>
    2666:	60 95       	com	r22
    2668:	70 95       	com	r23
    266a:	80 95       	com	r24
    266c:	90 95       	com	r25
    266e:	9b 01       	movw	r18, r22
    2670:	ac 01       	movw	r20, r24
    2672:	bd 01       	movw	r22, r26
    2674:	cf 01       	movw	r24, r30
    2676:	08 95       	ret

00002678 <__divmodsi4>:
    2678:	97 fb       	bst	r25, 7
    267a:	09 2e       	mov	r0, r25
    267c:	05 26       	eor	r0, r21
    267e:	0e d0       	rcall	.+28     	; 0x269c <__divmodsi4_neg1>
    2680:	57 fd       	sbrc	r21, 7
    2682:	04 d0       	rcall	.+8      	; 0x268c <__divmodsi4_neg2>
    2684:	d7 df       	rcall	.-82     	; 0x2634 <__udivmodsi4>
    2686:	0a d0       	rcall	.+20     	; 0x269c <__divmodsi4_neg1>
    2688:	00 1c       	adc	r0, r0
    268a:	38 f4       	brcc	.+14     	; 0x269a <__divmodsi4_exit>

0000268c <__divmodsi4_neg2>:
    268c:	50 95       	com	r21
    268e:	40 95       	com	r20
    2690:	30 95       	com	r19
    2692:	21 95       	neg	r18
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
    2696:	4f 4f       	sbci	r20, 0xFF	; 255
    2698:	5f 4f       	sbci	r21, 0xFF	; 255

0000269a <__divmodsi4_exit>:
    269a:	08 95       	ret

0000269c <__divmodsi4_neg1>:
    269c:	f6 f7       	brtc	.-4      	; 0x269a <__divmodsi4_exit>
    269e:	90 95       	com	r25
    26a0:	80 95       	com	r24
    26a2:	70 95       	com	r23
    26a4:	61 95       	neg	r22
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	8f 4f       	sbci	r24, 0xFF	; 255
    26aa:	9f 4f       	sbci	r25, 0xFF	; 255
    26ac:	08 95       	ret

000026ae <__prologue_saves__>:
    26ae:	2f 92       	push	r2
    26b0:	3f 92       	push	r3
    26b2:	4f 92       	push	r4
    26b4:	5f 92       	push	r5
    26b6:	6f 92       	push	r6
    26b8:	7f 92       	push	r7
    26ba:	8f 92       	push	r8
    26bc:	9f 92       	push	r9
    26be:	af 92       	push	r10
    26c0:	bf 92       	push	r11
    26c2:	cf 92       	push	r12
    26c4:	df 92       	push	r13
    26c6:	ef 92       	push	r14
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	ca 1b       	sub	r28, r26
    26d8:	db 0b       	sbc	r29, r27
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	09 94       	ijmp

000026e6 <__epilogue_restores__>:
    26e6:	2a 88       	ldd	r2, Y+18	; 0x12
    26e8:	39 88       	ldd	r3, Y+17	; 0x11
    26ea:	48 88       	ldd	r4, Y+16	; 0x10
    26ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    26ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    26f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    26f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    26f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    26f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    26f8:	b9 84       	ldd	r11, Y+9	; 0x09
    26fa:	c8 84       	ldd	r12, Y+8	; 0x08
    26fc:	df 80       	ldd	r13, Y+7	; 0x07
    26fe:	ee 80       	ldd	r14, Y+6	; 0x06
    2700:	fd 80       	ldd	r15, Y+5	; 0x05
    2702:	0c 81       	ldd	r16, Y+4	; 0x04
    2704:	1b 81       	ldd	r17, Y+3	; 0x03
    2706:	aa 81       	ldd	r26, Y+2	; 0x02
    2708:	b9 81       	ldd	r27, Y+1	; 0x01
    270a:	ce 0f       	add	r28, r30
    270c:	d1 1d       	adc	r29, r1
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	ed 01       	movw	r28, r26
    271a:	08 95       	ret

0000271c <_exit>:
    271c:	f8 94       	cli

0000271e <__stop_program>:
    271e:	ff cf       	rjmp	.-2      	; 0x271e <__stop_program>
